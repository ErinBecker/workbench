[
  {
    "objectID": "workflow-guide.html",
    "href": "workflow-guide.html",
    "title": "Behind the Scenes of The Carpentries Workbench",
    "section": "",
    "text": "The Carpentries Workbench is the set of R packages and other tools that make it easy for anyone to create and contribute to a Carpentries Lesson and it was designed with the following guiding principles:\n\nLesson contributors do not need to know anything about the toolchain to contribute in a meaningful way,\nElements of the toolchain that evaluates, validates, and stylizes should live in separate repositories to allow for seamless updating, and\nThe procedures should be well-documented and generalizable enough that the toolchain is not entirely dependent on R.\n\nThis document provides details of how the packages of the workbench work behind the scenes to create a full Carpentries lesson website from markdown source file.\n\n\nThe Workbench is built on top of the following major pieces of software, all of which are available via RStudio\n\nGit \nR\nPandoc\n\nThe workbench itself consists of three R packages, which can all be updated on the fly with no changes to the lesson.\nThere are three packages that comprise The Workbench:\n\n{sandpaper}: User interface and engine for the workbench\n{pegboard}: Validation and parsing of lesson components\n{varnish}: HTML, CSS, and JavaScript templates\n\nIn addition, The workbench uses the following packages for support:\n\n{knitr}: engine that renders R Markdown documents to Markdown\n{tinkr}: converts Markdown to an XML representation for {pegboard} to parse\n{pkgdown}: provisioning and applying HTML templates\n{gert}: interface to git with or without a local installation."
  },
  {
    "objectID": "workflow-guide.html#local-workflow",
    "href": "workflow-guide.html#local-workflow",
    "title": "Behind the Scenes of The Carpentries Workbench",
    "section": "Local Workflow",
    "text": "Local Workflow\n\nThe two-step\nThe local workflow is known as a ‘two-step’ workflow, which renders markdown from the source files (either Markdown or R Markdown) and then applies the styling to HTML rendered from these Markdown sources.\n\n\n\nThe local two-step model of deployment into local folders\n\n\n\n\n\n\n\n\nNote\n\n\n\nOnly the source files here are tracked by Git. Everything else is ignored locally.\n\n\nWe use the two-step process because it provides us an air-gap between the tools needed to build the markdown and the tools needed to render the website. It also provides us a ready cache of outputs so that R Markdown source content does not need to be re-rendered. Moreover, we designed these tools to be independent from each other so that if, in the future, we can mix and match with different tools as they become available.\n\n\n\n\n\n\nNote\n\n\n\nThe two-step process is not new; the {rmarkdown} package uses this process behind the scenes, but it will discard the markdown output by default.\n\n\n\n\nValidation\nLesson validation is performed by {pegboard} by parsing Markdown and evaluating the elements for low-hanging fruit of accessibility:\n\nLink and Image Validity\nFenced Div Validity\nHeading Validity\n\nThe validation of lesson elements is performed before the lesson is built, so that the contributor can address any issues even if they have a broken component in the rest of the toolchain. Invalid lesson elements are displayed on the contributors R console with information about the location of the error, an explanation of what was wrong, and a link to resources to help explain the error and offer correction.\n\n\nIn Practice\nBecause of the need for bootstrapping, validation, and caching, the number of steps from source files to lesson website is considerably more than two. The diagram below describes shows the process by which a lesson is built using the workbench.\n\nThe lesson contributor has an idea and writes it in Markdown or R Markdown\nThe lesson contributor runs sandpaper::serve() to start the engine.\n{sandpaper} passes this file to {pegboard}, which checks it for accessibility and reports to the user if there are any errors\n{sandpaper} passes the file to {knitr}, which renders the file to Markdown and stores it in the site/built folder\n{sandpaper} passes the file to PANDOC, which renders the Markdown to HTML (this is temporarily stored as a character vector in R)\n{sandpaper} passes the HTML to {pkgdown}, which applies the templates from {varnish}, creating the lesson website."
  },
  {
    "objectID": "workflow-guide.html#remote-workflow",
    "href": "workflow-guide.html#remote-workflow",
    "title": "Behind the Scenes of The Carpentries Workbench",
    "section": "Remote Workflow",
    "text": "Remote Workflow\nThe motivation for the remote workflows is the same as the local workflow: to allow for rendering of an HTML website without having to rebuild files that have previously been built. The only twist is that these files are necessarily ephemeral because we will never be building the site on the same server day to day, so how do we avoid rebuilding markdown intermediates and HTML outputs when we do not track them by git?\nThe answer is with orphan branches that map on to the folders in site/ using git worktrees, which is achieved via the internal function sandpaper:::ci_deploy().\n\n\n\nFolder\nBranch\nContents\n\n\n\n\nsite/built\nmd-outputs\nMarkdown outputs and rendered files (e.g. images)\n\n\nsite/docs\ngh-pages\nHTML outputs for the live website.\n\n\n\n\n\n\nDiagram of the sandpaper:::ci_deploy() process\n\n\n\n\n\n\n\n\nGlossary\n\n\n\n\norphan branch\n\nOrphan branches are separate branches known to git that share no common history with the main branch.\n\nwork tree\n\nWork trees are a special git workflow that allows you to work on multiple for the same repository in separate folders.\n\n\n\n\nEach time a commit happens on the main branch, the main branch is checked out and then git worktrees are provisioned inside of the site/ directory for each branch via the internal function sandpaper:::git_worktree_setup(), which is modified from Hadley Wickham’s pkgdown::deploy_to_branch() function. After they are provisioned and the contents populated from the existing branches, then they appear on the remote system just like they appear on your local system and the lesson can be updated without rebuilding everyting.\nOnce it is all done, the contents are pushed to their respective branches, the worktrees are disassembled, and the remote runner is released to another task."
  },
  {
    "objectID": "beta-phase.html",
    "href": "beta-phase.html",
    "title": "beta phase of The Carpentries Workbench",
    "section": "",
    "text": "The Carpentries Workbench, first released in January 2022, has been running without issue for several months with several early adopters, who have all contributed to its improvement from their feedback. It is now at the stage where we are confident that it is in a stable condition to be used for Carpentries Lessons as a whole. Of course, with over 100 maintainers and even more instructors, making a sudden change has the potential to be massively disruptive.\nInstead, we are slowly releasing The Workbench in three stages over a 16 week period during which there will be parallel websites showing two versions of the same lesson1. For example, when you visit https://datacarpentry.org/R-ecology-lesson, there will be a banner at the top of every page that will give a link to the beta version of the lesson (under https://preview.carpentries.org/) and the dates the styles version will be deprecated and finally superseded.\n\n\nThis slow progression is designed to allow community members to familiarlize themselves with the new format and to build expertise within the community for May 2023 when the infrastructure is formally released.\nThe three stages are called “pre-beta”, “beta”2, and “pre-release”.\nIf you would like to participate in the beta phase, you can\n\nfind out more about our workbench through our Resource Guide,\nintroduce yourself, and\ngive feedback via GitHub Discussions\n\n\n\n\nAn overview of the Workbench beta phase for the Git repository and the website, separated into three stages. The entire process will take about 12 months until the pre-beta stage.\n\n\n\n\nLessons in this stage will have a workbench version of the lesson live in a separate repository in a sandbox GitHub organisation3. This version will be a snapshot from the date of the pre-beta version. Any changes made to the snapshot will appear on the beta website, but will disappear as soon as the lesson enters beta. Maintainers are encouraged to clone this snapshot repository and try it out by creating pull requests that change content.\n\n\n\n\n\n\nTasks to try\n\n\n\nThe purpose of the pre-beta stage is to make sure maintainers are comfortable with working on the lesson. Anything that happens on the sandbox repository is not permanent. Below is a list of tasks for different members of the community to try.\nAs always, please provide feedback in our < 1 minute survey\n\nMaintainersInstructorsContributors\n\n\nDuring this time, you should take the time to merge or resolve any open PRs in your lesson. And yes, this is a big task and it is helpful to remember how to say ‘no’ in a way that respects the contributor’s time and effort. If you feel like you need help with a particular PR, please contact Zhian and he will help craft a response.\n\nclone the lesson and build it locally (see the setup instructions)\nmerge one of the automated workflow update PRs that is opened by @carpentries-bot\nreview a PR that includes some failing accessibility checks\n(R lessons only) review a PR using the preview of rendered changes\ncreate an inline instructor note from existing instructor notes\nfix a simple typo in a lesson—perhaps in a relatively non-obvious location e.g. in the setup instructions\nfix some broken syntax in a lesson\nwrite a link from one episode to another in the same lesson\ntrigger a rebuild of the lesson from GitHub Actions\n\n\n\nBrowse the lesson and give feedback on your impressions. Is everything where you expect it to be?\n\n\nMake a contribution to an episode! Click on the “Edit this page” button and make a change.\n\n\n\n\n\n\n\n\nLessons in this stage will undergo a lesson release of the styles version and a snapshot of the repository, including issues and pull requests, will be archived. The default branches (gh-pages and main) will be renamed and a transformation4 of the default branch will be inserted as main:\n\n\n\nbranch\ntransformation\nnew name\n\n\n\n\ngh-pages\nnone\nlegacy/gh-pages\n\n\nmain\nnone\nlegacy/main\n\n\n[default]\nremove styles commits; transform syntax to Workbench\nmain\n\n\n\nThe default lesson URL will still be served from the legacy/gh-pages branch during this period. All new changes to the lesson will be made to the workbench version.\n\n\n\n\n\n\nTasks to try\n\n\n\nAs always, please provide feedback in our < 1 minute survey\n\nMaintainersInstructorsContributors\n\n\n\n\nBefore this stage can happen, you must merge or resolve any open PRs in your lesson. If you feel like you need help with a particular PR, please contact Zhian and he will help craft a response.\nDuring this stage, you are working on the lesson as you would normally, which means to address any issues or pull requests that come in and improve the lesson. In addition, I would recommend to continue to do the things you were doing during the pre-beta stage, but first:\n\nUpdate your local version of the lesson (instructions to update)\nRe-fork the lesson if you have a fork (see the instructions in the FAQ)\n\n\n\nBrowse the lesson and give feedback on your impressions. Is everything where you expect it to be?\nNow that the lesson source is in a permanent stage, add an inline instructor note. Click on the “Edit this page” button in any episode and make a change.\n\n\nMake a contribution to an episode! Click on the “Edit this page” button and make a change.\n\n\n\n\n\n\n\n\n\n\n\nUpdating your local clone\n\n\n\nDuring this phase, you will need to take care to bring in the changes to your local clone because they WILL be different. Details can be found in The Lesson Transition repository:\n\nQuck and Dirtyvia Git: Markdown Lessonsvia Git: R Markdown Lessons\n\n\nThe easiest way is to get the updates and avoid dreaded merges is to use the burn it all down approach. For those who are more confident in their git skills, read on.\n\n\nThe general strategy is the same as when someone changes the name of their default branch: rename your local branch, fetch the changes, and set the right branch to track upstream:\nIn your lesson, use these commands. DO NOT PULL FIRST.\ngit checkout gh-pages              # make sure you are gh-pages\ngit branch -m gh-pages legacy/gh-pages               # rename the gh-pages branch to legacy\ngit fetch origin                                     # fetch changes from GitHub\ngit branch -u origin/legacy/gh-pages legacy/gh-pages # make sure your legacy branch tracks\ngit checkout main                  # switch to the brand-new main branch\ngit remote set-head origin -a      # set main branch to be your local default\n\n\nThe general strategy is the same as when someone changes the name of their default branch: rename your local branch, fetch the changes, and set the right branch to track upstream:\nIn your lesson, use these commands. DO NOT PULL FIRST.\ngit checkout main                  # make sure you are on main\ngit branch -m main legacy/main     # change 'main' to legacy\ngit checkout gh-pages              # switch to gh-pages\ngit branch -m gh-pages legacy/gh-pages       # rename the gh-pages branch to legacy\ngit fetch origin                             # fetch changes from GitHub\ngit branch -u origin/legacy/main legacy/main # make sure your legacy branches track\ngit branch -u origin/legacy/gh-pages legacy/gh-pages \ngit checkout main                  # switch to the brand-new main branch\ngit remote set-head origin -a      # set main branch to be your local default\n\n\n\n\n\nMaintainers will continue to work on this workbench version of the lesson.\n\n\n\nThe styles version of the lesson (in the legacy/ branches) will be removed, the default version of the lesson will switch to The Workbench, and the workbench-beta website will redirect to the live lesson."
  },
  {
    "objectID": "beta-phase.html#lessons-currently-in-the-beta-phase",
    "href": "beta-phase.html#lessons-currently-in-the-beta-phase",
    "title": "beta phase of The Carpentries Workbench",
    "section": "Lessons currently in the beta phase",
    "text": "Lessons currently in the beta phase\nMaintainers of the following lessons have agreed to use their lessons to test out the beta phase of The Carpentries Workbench: If you want to preview these lessons, please visit the lesson, browse around and then provide feedback in our < 1 minute survey\n\n\n\nLesson\nWorkbench URL\n\n\n\n\nR for Social Scientists\nhttps://preview.carpentries.org/r-socialsci\n\n\nIntroduction to Geospatial Raster and Vector Data with R\nhttps://preview.carpentries.org/r-raster-vector-geospatial\n\n\nInstructor Training\nhttps://preview.carpentries.org/instructor-training\n\n\nAnálisis y visualización de datos usando Python\nhttps://preview.carpentries.org/python-ecology-lesson-es\n\n\n\nThese lessons are all in the first (pre-beta) stage and will transition to the second (beta) stage on 2023-02-03.\n\nTimeline\n\n\n\n\ngantt\n    dateFormat  YYYY-MM-DD\n    axisFormat  %d %b\n    title       Schedule For Lessons in Workbench Beta\n\n    beta phase Start   :milestone, 2022-12-12,\n    Pre Beta           :      dcre-pb, 2022-12-12, 56d\n    Beta               :      dcre-b, after dcre-pb, 56d\n    Pre-release        :milestone, crit, after dcre-b\n\n\n\n\n\n\n\n\n\nThese are the official Carpentries lessons that have entered the beta phase. Note that three out of the seven participated in the early stages of the beta phase, but were unable to continue due to extenuating circumstances. 2022 was a tough year for many people and participating in the beta phase was a voluntary act for our volunteer maintainers.\nI am grateful for all of the maintainers who have participated in any stage of the beta phase. All of the contributions from the maintainers of these lessons have helped bring stability and refinement to The Carpentries Workbench.\n\ndatacarpentry/r-socialsci—R for Social Scientists\ndatacarpentry/r-raster-vector-geospatial—Introduction to Geospatial Raster and Vector Data with R\ncarpentries/instructor-training—Instructor Training\ndatacarpentry/python-ecology-lesson-es—Análisis y visualización de datos usando Python\ndatacarpentry/OpenRefine-ecology-lesson—Data Cleaning with OpenRefine for Ecologists\ndatacarpentry/R-ecology-lesson—Data Analysis and Visualization in R for Ecologists\nlibrarycarpentry/lc-shell—Library Carpentry: The UNIX Shell\n\n\n\nCommunity Lessons\nThe following community lessons will be migrated to the Workbench during the beta phase. At the moment, there is no definite timeline, but we will update that soon. Note that these lessons will skip directly from pre-beta into pre-release.\n\ncarpentries-incubator/git-novice-branch-pr—Version Control with Git\ncarpentries-incubator/data-management-pipelines-engineering—Data management and analytic pipelines for engineers\ncarpentries-incubator/markdown-intro—Introduction to Markdown\ncarpentries-incubator/SDC-BIDS-IntroMRI—Introduction to MRI and BIDS\ncarpentries-incubator/SDC-BIDS-dMRI—Introduction to dMRI\ncarpentries-incubator/SDC-BIDS-fMRI—fMRI Imaging Analysis\ncarpentries-incubator/julia-novice—A lesson exploring the Julia language\ncarpentries-incubator/R-archaeology-lesson\ncarpentries-incubator/python-packaging-publishing—Packaging and Publishing with Python"
  },
  {
    "objectID": "contributor/pre-beta.html",
    "href": "contributor/pre-beta.html",
    "title": "Carpentries Workbench Beta Phase",
    "section": "",
    "text": "You came to this page from a live snapshot of the lesson. Please be aware that any edits you make will not be permanent. Find out more about the pre-beta stage.\n\n\n\n\n\n\nIf you have a minute, please give us feedback in a short, <1 minute survey about your experience with using The Carpentries Workbench."
  },
  {
    "objectID": "contributor/sandpaper.html",
    "href": "contributor/sandpaper.html",
    "title": "{sandpaper}",
    "section": "",
    "text": "The user interface to The Workbench is an R package called {sandpaper}. This package is responsible for the following broad areas.\n\nStatic Site Generation\n\nPrimarily, {sandpaper} is responsible for (rendering and) transforming the files contained within a lesson source repository into a lesson website. The command to generate a website is sandpaper::build_lesson().\n\n\nThis is accomplished in a two-step workflow that first renders any files that have generated content into markdown and then applies the CSS, JS, and HTML styling from {varnish}. This two-step process allows us to cleanly separate the tools from the styling components.\nNote that this does not mean that {sandpaper} is suitable for a generic static site. It’s primary purpose is to generate a lesson website.\n\nDependency Management\n\nFor lessons that use generated content, R packages are needed, and so, {sandpaper} leans heavily on {renv} to automatically detect and record dependencies of a lesson to ensure reproducibility. Users give consent (once) with sandpaper::use_package_cache() and populate their dependencies with sandpaper::manage_deps().\n\n\nNote: this component may be moved to a different package.\n\nDeployment Pipeline Management\n\nEvery lesson is deployed using a GitHub Actions workflow that deploys the outputs of the site generation to two branches in a repository. The purpose of the workflow is mainly to provision the environment for {sandpaper} to perform the deployment via the internal function sandpaper:::ci_deploy(), which sets up git worktrees for orphan branches under site/ and then runs sandpaper::build_lesson()\n\n\nNote that while the workflows for {sandpaper} only work on GitHub, this does not preclude a Workbench lesson from being deployed by any other method. In fact, it is possible to deploy from your own computer.\n\nAccessibility Helper\n\nThe first thing that {sandpaper} does when previewing or deploying a lesson is to validate that links and images are presented in an accessible by calling the validate_lesson()."
  },
  {
    "objectID": "contributor/sandpaper.html#special-technical-requirements",
    "href": "contributor/sandpaper.html#special-technical-requirements",
    "title": "{sandpaper}",
    "section": "Special Technical Requirements",
    "text": "Special Technical Requirements"
  },
  {
    "objectID": "contributor/releases.html",
    "href": "contributor/releases.html",
    "title": "Release Process for Workbench Packages",
    "section": "",
    "text": "The workbench contains three main packages:\n\n{sandpaper}: user interface and workflow engine\n{pegboard}: parsing and validation engine\n{varnish}: HTML templates, CSS, and JS elements\n\nEach of these packages are available on the Carpentries R-Universe and new versions are checked for hourly. This allows folks to get up-to-date versions of The Workbench packages built for their system without running out of GitHub API query attempts.\nIn order to maintain quality, packages are only sent to the R-Universe if they have been formally released on GitHub (as specified in the packages.json configuration file). This allows us to incrementally add new experimental features without changing the stable deployments."
  },
  {
    "objectID": "contributor/releases.html#release-process",
    "href": "contributor/releases.html#release-process",
    "title": "Release Process for Workbench Packages",
    "section": "Release Process",
    "text": "Release Process\nWhen a package is ready for release we use the following checklist:\n\nUpdate version number in DESCRIPTION\nAdd NEWS for the changes in this version\nEnsure all changes are committed and pushed\nadd new signed tag with the name “ X.Y.Z”# example: create a signed (-s) tag for sandpaper 3.3.3\ngit tag -s 3.3.3 -m 'sandpaper 3.3.3'\ncreate a release on github from the new tag\n\n\n\n\n\n\n\nNote\n\n\n\nZhian likes to create tags via the command line because he has set up his git configuration to use a gpg signature so the tags and the releases are both verified.\n\n\nThe last two items can be achieved in a single step with the github cli with the command gh release create X.Y.Z for the version number\ngh release create 3.3.3\n# ? Title (optional) sandpaper 3.3.3\n# ? Release notes  [Use arrows to move, type to filter]\n#   Write my own\n# > Write using generated notes as template\n#   Leave blank\nSelecting “Write using generated notes as a template” opens an editor and populates it with the pull requests that have been accepted since the last release.\nOnce the relase is created on GitHub, then the package will be available on the R-Universe in about an hour or less."
  },
  {
    "objectID": "contributor/index.html",
    "href": "contributor/index.html",
    "title": "Overview",
    "section": "",
    "text": "This section of the website is dedicated to materials you may need when you want to make a contribution to The Carpentries Workbench. It will detail the minimum developer environment required to contribute to the components of this project.\n\n\n\n\n\n\nThis section is still under construction!\n\n\n\nWe are still assembling the documentation for this part of the site. If you would like to contribute, please feel free to open an issue.\n\n\nThe core of The Carpentries Workbench consists of three packages:\n\n{sandpaper}: user interface and workflow engine\n{pegboard}: parsing and validation engine\n{varnish}: HTML templates, CSS, and JS elements\n\nThese packages are all available and released to the Carpentries R-Universe, which checks for updates to the source packages hourly.\nThe interaction between these packages, the lesson content, and the author can be summarised like this where the author makes an edit:\n\n\n\n\nsequenceDiagram\n    autonumber\n    actor Author\n    participant Lesson \n    %% box rgb(255, 214, 216) The Workbench\n    participant {sandpaper}\n    participant {pegboard}\n    participant {varnish}\n    %% end\n    %% box rgb(255, 231, 168) Generated Files\n    %% participant episode.md\n    %% participant episode.html\n    %% end\n\n    Author ->> {sandpaper}: sandpaper::serve()\n    activate Author\n    {sandpaper} --) Author: website preview\n    note left of {sandpaper}: monitor for changes\n    Author ->> Lesson: make an edit\n    deactivate Author\n    Lesson -->> {sandpaper}: READ changed file(s)\n    {sandpaper} -->> {pegboard}: validate Lesson\n    activate {pegboard}\n    {pegboard} --) Author: report accessibility \n    deactivate {pegboard}\n    activate {sandpaper}\n    note left of {sandpaper}: WRITE markdown\n    %% {sandpaper} ->> episode.md: WRITE to Markdown (via {knitr} and {renv})\n    %% episode.md -->> {sandpaper}: convert to HTML (via pandoc)\n    {varnish} -->> {sandpaper}: load and apply website template\n    note left of {sandpaper}: WRITE website\n    %% {sandpaper} ->> episode.html: WRITE website\n    {sandpaper} --) Author: website preview\n    deactivate {sandpaper}\n\n\n\n\n\n\n\n\nThe process to WRITE Markdown and load the processed HTML from that markdown involves {knitr} and pandoc:\n\n\n\n\nsequenceDiagram\n    autonumber\n    participant episode.Rmd\n    %% box rgb(255, 214, 216) The Workbench\n    participant {sandpaper}\n    %% end\n    participant {knitr}\n    participant episode.md\n    participant pandoc\n    %% box rgb(255, 231, 168) Generated Files\n    %% end\n\n    episode.Rmd -->> {sandpaper}: READ changed file(s)\n    activate {sandpaper}\n    {sandpaper} -->> {knitr}: PROCESS updated Markdown\n    {knitr} -->> episode.md: WRITE Markdown\n    episode.md -->> pandoc: convert to HTML\n    pandoc -->> {sandpaper}: return HTML\n    deactivate {sandpaper}\n\n\n\n\n\n\n\n\nafter this, the HTML is post-processed into learner and instructor components, the {varnish} template applied, and written to disk."
  },
  {
    "objectID": "contributor/index.html#development",
    "href": "contributor/index.html#development",
    "title": "Overview",
    "section": "Development",
    "text": "Development\nDevelopment of The Workbench is overseen by Zhian N. Kamvar. New features are added incrementally as pull requests. Pushes to the main branch are rare and discouraged. New features must have tests associated (with the exception of {varnish}).\nIf you are interested, we have documentation for the release process available.\n\nSoftware Tools\nDevelopment of Workbench components requires the same toolchain for working on lessons:\n\nR\npandoc\nGit\n\nIt is recommended to have the latest versions of R and pandoc available. You need at least git 2.28 for security purposes.\n\n\nR version\n---\n\n\nR version 4.2.3 (2023-03-15) -- \"Shortstop Beagle\"\nCopyright (C) 2023 The R Foundation for Statistical Computing\nPlatform: x86_64-pc-linux-gnu (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under the terms of the\nGNU General Public License versions 2 or 3.\nFor more information about these matters see\nhttps://www.gnu.org/licenses/.\n\n\n\npandoc version\n---\n\n\npandoc 2.19.2\nCompiled with pandoc-types 1.22.2.1, texmath 0.12.5.2, skylighting 0.13,\nciteproc 0.8.0.1, ipynb 0.2, hslua 2.2.1\nScripting engine: Lua 5.4\nUser data directory: /home/runner/.local/share/pandoc\nCopyright (C) 2006-2022 John MacFarlane. Web:  https://pandoc.org\nThis is free software; see the source for copying conditions. There is no\nwarranty, not even for merchantability or fitness for a particular purpose.\n\n\n\ngit version\n---\n\n\ngit version 2.40.0\n\n\nOnce you have these installed, make sure to install ALL of the dependencies for the workbench:\ninstall.packages(c(\"sandpaper\", \"pegboard\", \"varnish\", \"tinkr\"),\n  dependencies = TRUE,\n  repos = c(getOption(\"repos\"), \"https://carpentries.r-universe.dev\"))\nIn addition, you will need the {devtools} for development.\ninstall.packages(\"devtools\")\n\n\nDocumentation\nReference documentation for individual functions for each package is written alongside the function using {roxygen2}.\nThis documentation is generated by devtools::document()\n\n\nTesting\nTests for each package live in tests/testthat/ and follow a test-[file-name].R naming convention. These are controlled by the {testthat} package and run by devtools::test().\nNote that {sandpaper} tests take a long time to run and require internet.\n\n\nContinous Integration\nThe continous integration for each package tests on Ubuntu, MacOS, and Windows systems with the last five versions of R (same as the RStudio convention).\n\nComing up:\n\nTesting Pull Requests (Locally and on your fork)\nResources for R package development\nAdding functionality to {sandpaper}\nAdding functionality to {pegboard}\nAdding styling elements to {varnish}\nAdding functionality to carpentries/actions"
  },
  {
    "objectID": "contributor/beta.html",
    "href": "contributor/beta.html",
    "title": "Carpentries Workbench Beta Phase",
    "section": "",
    "text": "You came to this page from a frozen snapshot of a lesson that is being tested in\nThe Workbench Beta Phase\n\n\nany edits you propose will be made on The Workbench version of the lesson.\nFind out more about the beta stage.\n\n\n\n\n\n\n\n\n\nIf you have a minute, please give us feedback in a short, <1 minute survey about your experience with using The Carpentries Workbench."
  },
  {
    "objectID": "transition-guide.html",
    "href": "transition-guide.html",
    "title": "Transition Guide: From Styles to Workbench",
    "section": "",
    "text": "The Carpentries Workbench is a replacement for the former carpentries/styles lesson infrastructure. Lessons using The Carpentries Workbench have content separated from styling and build tools for a more seamless experience in updates to the lesson websites. In 2023, all lessons in official Carpentries lesson programs will use The Workbench and will be converted using the lesson-transition tool.\nThis document is intended to provide you with a quick reference about the differences between kramdown (used by styles) and pandoc-flavoured markdown (used by The Workbench):"
  },
  {
    "objectID": "transition-guide.html#for-maintainers",
    "href": "transition-guide.html#for-maintainers",
    "title": "Transition Guide: From Styles to Workbench",
    "section": "For Maintainers",
    "text": "For Maintainers\n\nDefault Branch\n\n\n\n\nWorkbench\nThe default branch is always main\n\n\n\n\nstyles\nThe default branch is gh-pages UNLESS you have rendered RMarkdown content, then the default branch is main\n\n\n\n\n\n\nInfrastructure\n\n\n\n\nWorkbench\nThe workbench infrastructure is independent1 from individual lessons. It consists of three major pieces of software.\n\nGit \nR\nPandoc\n\nThe workbench itself consists of three R packages, which can all be updated on the fly with no changes to the lesson.\n\n{sandpaper}: user interface and workflow engine\n{pegboard}: parsing and validation engine\n{varnish}: HTML templates, CSS, and JS elements\n\n\n\n\n\nstyles\nThe styles infrastructure is embedded within the lesson itself. It requires the following major pieces of software to run:\n\nGit\nRuby\nBASH\nMake\nPython2\nR3\n\nThe styles workflow is a Jekyll-based workflow, which uses the following components:\n\nbundler: manages the Ruby gems (packages) including Jekyll\nJekyll: static site generator\n(file) Makefile: workflow management for building and validating\n(dir) assets/: CSS and JS elements\n(dir) _layouts/: HTML templates\n(dir) bin/: intialisation, runtime, and validation scripts (in BASH, Python, and R)\n(dir) _includes/: Markdown and HTML boilerplate for customisation\n\nThe file components can only be updated via pull request.\n\n\n\n\n\n\nContributor Count\nBecause content and tools are separated in Workbench Lessons, giving credit for the lesson is much more straightforward. Here we use Dr. Sarah Gibson’s Cross-Stitch Carpentry lesson as an example\n\n\n\n\nWorkbench\nThe Contributors reflect those that actually worked on the lesson itself.\n\n\n\nList of contributors reflects the lesson content contribution (note that Dr. Gibson is listed first)\n\n\n\n\n\n\nstyles\nThe Contributors reflect those that worked on the lesson AND those that worked on the underlying infrastructure, going back to 2013.\n\n\n\nList of contributors reflects lesson content and styles (note that Dr. Gibson is now fifth!)\n\n\n\n\n\n\n\n\nLocal Rendering\n\n\n\n\nWorkbench\n\nIf you haven’t already, Follow the setup instructions for the workbench to install R, pandoc, and the workbench packages\nIn your lesson directory, open either R, RStudio, or VS Code and run:\n\nsandpaper::serve()\n\n\n\n\nstyles\n\nIf you haven’t already, Follow the setup instructions for styles to install Ruby, Bundler, Jekyll, Make, Python, and BASH\nIn your lesson directory, open your command line and run:\n\nmake serve\n\n\n\n\n\n\nFolder Structure\nThe folders from styles to Workbench are rearranged to achieve the following goals:\n\ntools for building the lesson do not live in the lesson 4.\nthe episodes can be directly lifted from the lesson without needing external context/resources.\nextra content intended for instructors is clearly separated from that intended for learners\n\nEpisodes (aka Chapters) will move from _episodes/ and _episodes_rmd to the single folder episodes/. _extras/ content will be split into learners/ and instructors/ depending on the context of the content. Figures, data, and files all become subfolders of episodes/. \n\n\nSetup Page\n\n\n\n\n\nWorkbench\nThe setup information lives in learners/setup.md or learner/setup.Rmd, depending on whether or not you need code generated. Access this file from episodes with\n[setup instructions](../learners/setup.md)\nOn the rendered site, the setup instructions are located on the home page at the #setup anchor.\n\n\n\n\nstyles\nThe setup information lives in the top level of the lesson at setup.md (no possibility to render generated content). Access this file from episodes with\n[setup instructions]({{ page.root }}/setup.md)\nOn the rendred site, the setup instructions are in a separate page called /setup\n\n\n\n\n\n\n\nCallout Blocks/Special Blockquotes\n\n\n\n\n\nWorkbench\nA callout block with The Workbench uses at least three colons followed by a keyword to start a block. The block is closed with at least three colons.\n\n\n\n\n\n\nNote\n\n\n\nYou can find a demonstration of all the possible callout blocks in the workbench component guide\n\n\n:::: callout\n\n#### Act Openly\n\nWe believe that transparency, honesty, and fairness are keys to fostering\ntrust within an open community.\n\n::::::::::::\n\n\n\n\n\n\nTip\n\n\n\nThese are called fenced divs and in Workbench lessons, you will often see them have many more colons to clearly delineate sections in a lesson. The number of opening colons and the number of closing colons do not match and it is completely up to the lesson author to choose a style.\n\n\n\n\n\n\nstyles\nA callout block (aka “Special Blockquote”) with styles used block quote syntax and level 2 headers followed by a postfix tag declaring the class of block\n\n\n\n\n\n\nNote\n\n\n\nYou can find a demonstration of all the possible callout blocks in the styles “Special Blockquotes” guide\n\n\n> ## Act Openly\n>\n> We believe that transparency, honesty, and fairness are keys to fostering\n> trust within an open community.\n>\n{: .callout}\n\n\n\n\n\n\nDid you know?\n\n\n\nThe decision to use blockquotes was to facilitate an easy way to author special sections without having lesson authors/contributors type <div> tags into the document.\n\n\n\n\n\n\n\n\n\nHighlighted Code Blocks\n\n\n\n\n\nWorkbench\nCode fences in the workbench are indicated by fences that consist of three backticks (```) with the name of the language appended on the opening fence:  \nclean all merged branches from git\n\n```bash\ngit branch --merged | grep -v '^\\*' | xargs git branch -d\n```\n\n\n\n\nstyles\nCode fences in styles follow kramdown syntax, which prefers fences that consist of three tildes (~~~) with the liquid tag of the language appended on a new line after the closing fence (postfix tag):\nclean all merged branches from git\n\n~~~\ngit branch --merged | grep -v '^\\*' | xargs git branch -d\n~~~\n{: .language-bash}\n\n\n\n\n\n\n\nChallenge/Solution blocks\n\n\n\n\n\nWorkbench\nThe challenge and solution blocks in the workbench are nested pairs of blocks with an optional Level 3 header. You can additonally add a “hint” block before the solution.\n::::::::::::::::::::::::::::: challenge\n\n### Challenge: build\n\nWhat is the R command to build a Workbench lesson?\n\n::::::: hint\n\nThis command is going to start a **serve**r on your computer\n\n:::::::::::::\n\n::::::::: solution\n\n```r\nsandpaper::serve()\n```\n\n::::::::::::::::::\n:::::::::::::::::::::::::::::::::::::::\n\n\n\n\n\n\nTip\n\n\n\nTo help distinguish sections, double the number of columns for the outer section compared to the inner section.\n\n\n\n\n\n\nstyles\nThe challenge and solution blocks in the workbench are nested block quotes with Level 2 headers. Additional blocks are still of the class “solution”\n> ## Challenge: build\n> \n> What is the R command to build a Workbench lesson?\n> \n> > ## Hint\n> >\n> > This command is going to start a **serve**r on your computer\n> > \n> {: .solution} \n>\n> > ~~~\n> > sandpaper::serve()\n> > ~~~\n> > {: .language-r}\n> {: .solution} \n{: .challenge}\n\n\n\n\n\n\n\nQuestions/Objectives/Keypoints\n\n\n\n\n\nWorkbench\nQuestions and Objectives appear at the top of the lesson as fenced divs with list elements:\n---\ntitle: \"Bomp\"\nteaching: 5\nexercises: 5\n---\n\n::::::::::::::::: questions\n\n - Who put the **bomp** in the bomp bah bomp bah bomp?\n - Who put the **ram** in the rama lama ding dong?\n\n:::::::::::::::::::::::::::\n\n::::::::::::::::: objectives\n\n - Solve the \"bomp\" mystery.\n\n::::::::::::::::::::::::::::\n\n## Introduction\n\n...\nKeypoints should go in a fenced div at the end of the document:\n...\n\n::::::::::::::::: keypoints\n\n - We will never know who put the bomp in the bomp bah bomp bah bomp.\n\n:::::::::::::::::::::::::::\n\n\n\n\nstyles\nThe questions, objectives, and keypoints were placed in the YAML metadata for each episode:\n---\ntitle: \"Bomp\"\nteaching: 5\nexercises: 5\nquestions:\n - \"Who put the bomp in the bomp bah bomp bah bomp?\"\n - \"Who put the ram in the rama lama ding dong?\"\nobjectives:\n - \"Solve the \\\"bomp\\\" mystery.\"\nkeypoints:\n - \"We will never know who put the bomp in the bomp bah bomp bah bomp.\" \n---\n\n## Introduction\n\n...\n\n\n\n\n\n\nThe trouble with YAML metadata\n\n\n\nIt was not possible to include markdown inside these strings and it often caused errors due to missed quotation marks (i.e. - \"sentence with a period after quotes\". was a common type of error.)\nThis content was originally introduced into the YAML metadata so that we could use Jekyll’s metadata parsing to create a custom introductory block.\n\n\n\n\n\n\n\n\n\nInstructor notes\n\n\n\n\n\nWorkbench\nAn inline instructor note in the workbench is formed inside an episode by making a fenced div with the class “instructor”\n:::: instructor\n\nHere be dragons\n\n::::::::::::\nInstructor notes for the whole lesson can be placed in instructors/instructor-notes.md\n\n\n\n\nstyles\nInstructor notes do not exist in styles other than an aggregate markdown file called _extras/guide.md\n\n\n\n\n\n\n\nLists\n\n\n\n\n\nWorkbench\nIn general, if something does not work in Markdown, try adding a blank line. This is true for lists.\nA list must start and end with a blank line to be rendered properly:\n\nCorrect SyntaxIncorrect SyntaxLists in fenced divs\n\n\nA list of things\n\n- shoes\n- coat\n- glasses\n\ntext after the list\nA list of things\n\nshoes\ncoat\nglasses\n\ntext after the list\n\n\nA list of things\n- shoes\n- coat\n- glasses\n\ntext after the list\nA list of things - shoes - coat - glasses\ntext after the list\n\n\nLists in fenced divs behave the same way and a common mode of failure is to create a list inside a fenced div that does not have space around it:\n::: callout\n- one\n- two\n- three\n:::\nThis will result in a callout that has this content. Moreover, the lesson build will fail to validate:\n\none\ntwo\nthree :::\n\nInstead, please make sure you add blank lines around your list like this:\n::: callout\n\n- one\n- two\n- three\n\n:::\n\n\n\n\n\n\n\nstyles\nJekyll is very forgiving for lists in general, so a blank line before the list is optional\nA list of things\n- shoes\n- coat\n- glasses\n\ntext after the list\nA list of things\n\nshoes\ncoat\nglasses\n\ntext after the list\n\n\n\n\n\n\n\nTables\n\n\n\n\n\n\nAbout Table Styling\n\n\n\nPlease note that the table display here is not a good representation of what you will see in The Workbench or in Styles. They both have their own idiosyncratic ways of displaying tables.\nA demonstration of Workbench tables can be seen in the official documentation for lesson contributors\n\n\n\n\n\n\n.workbench\n\nWorkbench\nTables in the workbench follow the rules for pandoc pipe table syntax.\nThere are two extra features for this syntax in pandoc:\n\nYou can add a table caption, which is great for accessibility5\nYou have control over the relative width of oversized table contents\n\n\nShort table with captionWide table with caption\n\n\nTable: A table of fruits and prices\n\n| fruit  | price  |\n| ------ | -----: |\n| apple  | 2.05   |\n| pear   | 1.37   |\n| orange | 3.09   |\n| devil  | 666.00 |\n\nA table of fruits and prices\n\n\nfruit\nprice\n\n\n\n\napple\n2.05\n\n\npear\n1.37\n\n\norange\n3.09\n\n\ndevil\n666.00\n\n\n\n\n\nTo control the width of columns in the table, adjust the number of - in the separator between the header and the table body. This table has three columns with a 2:1:1 ratio (as noted by the |----|--|--| header)\nTable: summary of relevant statistical tests for normally and non-normally distributed data\n\n|Analysis required (continuous data) |Normally distributed data | Non-normally distributed data |\n| ----                               | --                       | --                            |\n|Compare mean or median of one sample group against a known value |One sample t-test |Wilcoxon Rank Sum test |\n|Compare means or medians of two sample groups (unpaired data) |Unpaired t-test |Mann-Whitney test |\n|Compare means or medians of two sample groups (paired data) |Paired t-test |Wilcoxon Matched Pairs test |\n|Compare means or medians of ≥ three sample groups (unpaired data) |ANOVA |Kruskal-Wallis ANOVA |\n|Compare means or medians of ≥ three sample groups (paired data) |Repeated measures ANOVA |Friedman test |\n\nsummary of relevant statistical tests for normally and non-normally distributed data\n\n\n\n\n\n\n\nAnalysis required (continuous data)\nNormally distributed data\nNon-normally distributed data\n\n\n\n\nCompare mean or median of one sample group against a known value\nOne sample t-test\nWilcoxon Rank Sum test\n\n\nCompare means or medians of two sample groups (unpaired data)\nUnpaired t-test\nMann-Whitney test\n\n\nCompare means or medians of two sample groups (paired data)\nPaired t-test\nWilcoxon Matched Pairs test\n\n\nCompare means or medians of ≥ three sample groups (unpaired data)\nANOVA\nKruskal-Wallis ANOVA\n\n\nCompare means or medians of ≥ three sample groups (paired data)\nRepeated measures ANOVA\nFriedman test\n\n\n\nTable: table to demonstrate a wrapped cell\n\n| with wrapping | without wrapping |\n| --            | ------           |\n| This is a lot of text for a very tiny cell. It almost certainly will be wrapped. | This is a lot of text for a wider cell. It will not wrap so soon. |\n\ntable to demonstrate a wrapped cell\n\n\n\n\n\n\nwith wrapping\nwithout wrapping\n\n\n\n\nThis is a lot of text for a very tiny cell. It almost certainly will be wrapped.\nThis is a lot of text for a wider cell. It will not wrap so soon.\n\n\n\n\n\n\n\n\n\n\nstyles\nJekyll tables are the same syntax, but with no ability to add captions or control width:\n| fruit  | price  |\n| ------ | -----: |\n| apple  | 2.05   | \n| pear   | 1.37   |\n| orange | 3.09   |\n| devil  | 666.00 |\n\n\n\nfruit\nprice\n\n\n\n\napple\n2.05\n\n\npear\n1.37\n\n\norange\n3.09\n\n\ndevil\n666.00\n\n\n\n\n\n\n\n\n\n\nInternal Links\n\n\n\n\n\nWorkbench\nLinks in the Workbench are relative to the file so that you can link to the files and confirm they work in the github preview. Figures, files, and data are nested inside the episodes/ folder.\n<!-- Next Episode -->\n[next episode on dragons](dragons.md)\n<!-- Data -->\n[download the dragon data for this episode](data/dragon-lifespan.csv)\n<!-- Setup -->\n[setup instructions](../learners/setup.md)\n\n\n\n\nstyles\nLinks are relative to the page that they are rendered to. You should use the {{ page.root }} variable and the link tag in order to construct the correct path to the resource:\n<!-- Next Episode -->\n[next episode on dragons]({{ page.root }}{% link _episodes/dragons.md %})\n<!-- Data -->\n[download the dragon data for this episode]({{ page.root }}/data/dragon-lifespan.csv)\n<!-- Setup -->\n[setup instructions]({{ page.root }}/setup.md)\n\n\n\n\n\n\n\nFigures\n\n\n\n\n\nWorkbench\nFigures are written with the caption in the square brackets and alt appended as an attribute like so: ![caption](fig/image.png){alt='image description'}.\n![The dragon emerges!](fig/dragon-egg.png){alt='a red baby \ndragon head sticks out from its egg'}\n\n\n\n\n\n\nNote\n\n\n\nThere is a valid reason behind this choice: text inside of the square brackets can be formatted as markdown, so it makes sense for the caption. Alt text needs no decoration as it will be descriptive.\n\n\n\n\n\n\nstyles\nFigures are written with alt text in the square brackets, but no caption like so: ![alt text]({{ page.root }}/fig/image.png)\n![a red baby dragon head sticks out from its egg]({{ page.root }}/fig/dragon-egg.png)\n\nThe dragon emerges!"
  },
  {
    "objectID": "transition-guide.html#for-instructors",
    "href": "transition-guide.html#for-instructors",
    "title": "Transition Guide: From Styles to Workbench",
    "section": "For Instructors",
    "text": "For Instructors\n\nNavigation\n\n\n\n\n\nWorkbench\nEpisode and setup information is located on the left hand side of the page. Navigation in the workbench is split between information for learners and information for instructors. The top right of the page has a toggle button between Learner and Instructor views, which change the four main navigation items in the top navigation bar.\n\nLearner View\nWhen this is toggled, the main navigation contains the following menu items: Key Points, Glossary, Learner Profiles, and More. The “More” dropdown menu contains information for learners from the learners/ folder aside from the setup instructions.\n\n\n\nInstructor view\nWhen this is toggled, the main navigation contains the following menu items: Key Points, Instructor Notes, Extract All Images, and More. The “More” dropdown menu contains information for learners from the instructors/ folder.\nIn addition, the schedule now appears on the home page, instructor notes are displayed inline, and the estimated timings for a lesson appear.\n\n\n\n\n\n\nstyles\nNavigation in the styles repository is relegated to a single menubar at the top of the lesson with seven items: Home, Code of Conduct, Setup, Episodes (dropdown), Extras (dropdown), License, and Improve This Page.\n\n\n\n\n\n\n\nPerceived simplicity\n\n\n\nWhile the styles repositories appear to be simpler, there were several components of lessons (such as instructor notes and glossary terms) that were not clearly available to learners or instructors. Moreover, in cases like instructor training, where there was much extra content for both learners and instructors, it was not easy to look at the “Extra” menu and determine what content was appropriate for a learner or an instructor.\n\n\n\n\n\n\n\n\n\nSetup Information\n\n\n\n\n\nWorkbench\nThe setup instructions are located on the home page at the #setup anchor.\nThe link to get to the setup is located at the “Summary and Setup” (in Learner View) or the “Summary and Schedule” links (in Instructor View) in the side navigation bar:\n\n\n\n\n\nstyles\nThe setup instructions are in a separate page called /setup\nThe link for the setup instructions are located in the navigation bar.\n\n\n\n\n\n\n\n\nImprove/Edit This Page\nOur core values state that we value openness, all contributions, and are always learning. This is why we have an “edit this page” button on all of our lessons, so anyone can make suggestions. This button is always at the top and the bottom of episodes.\n\n\n\n\n\nWorkbench\nThe “Edit This Page” button is located under the heading for each episode:\n\nand on the first column of the footer:\n\n\n\n\n\nstyles\nThe navigation bar in styles contains a link to “Improve this page”:\n\nThe footer contains a link to “Edit on GitHub”\n\n\n\n\n\n\n\n\nLicense\nOur official lessons are all CC-BY, but lessons that are not official may have alternative licenses. Moreover, code and data should also specify attribution and reuse.\n\n\n\n\n\nWorkbench\nThe License information can be found at the LICENSE.html page, whose link is always in the footer:\n\n\n\n\n\nstyles\nThe License information can be found at the LICENSE.html page, whose link is in the header:\n\n\n\n\n\n\n\n\nCode of Conduct\nThe Carpentries Code of Conduct ensures that our workshops and lessons are a safe space to learn and create. This link is always on our lesson pages. It provides rules for behaviour and reporting guidelines.\n\n\n\n\n\nWorkbench\nThe Code of Conduct information can be found at the CODE_OF_CONDUCT.html page, whose link is always in the footer:\n\n\n\n\n\nstyles\nThe Code of Conduct information can be found at the CODE_OF_CONDUCT.html page, whose link is in the header\n\n\n\n\n\n\n\n\nAll in One Page\nThe all-in-one page concatenates all of the episodes in a lesson so that you can scroll through the episodes without having to switch pages.\n\n\n\n\n\nWorkbench\nThe link to this page is at aio.html and can be found at the bottom of the side navigation bar.\n\nYou can jump to individual episodes within this page by adding #aio-[page slug] to the end of the URL.\nFor example, From the Workbench Documentation, following https://carpentries.github.io/sandpaper-docs/aio.html#aio-episodes will bring you to the “Episode Structure” episode in the all in one page.\n\n\n\n\nstyles\nThe link to this page is at aio.html and can be found at the bottom of the episode dropdown in the navigation bar.\n\nNote that there is no clear division between the episodes in this page."
  },
  {
    "objectID": "faq.html",
    "href": "faq.html",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "Work In Progress\n\n\n\nAs this is a FAQ, it will continue to grow as we update it. If you have any questions please submit them to the Workbench GitHub discussion forum.\nI will attempt to divide these questions up by major categories, but these may shift around as questions come in.\nIf you have a question about definitions, consult our glossary"
  },
  {
    "objectID": "faq.html#authoring",
    "href": "faq.html#authoring",
    "title": "Frequently Asked Questions",
    "section": "Authoring",
    "text": "Authoring\nThese FAQs are intended for those who contribute to, maintain, or create lessons using The Workbench. If you only ever visit the website, then head over to the Teaching or Learning sections.\n\nDo I really need to use RStudio?\nNo. We recommend using RStudio for several reasons that pertain to ease of use and standardisation across systems, but we do not absolutely require it. If you are able to get Git, R, and pandoc installed on your system, then you do not need to use RStudio.\n\n\nWhat is an R Library?\nAn R library is a folder on your computer that stores R packages. When you install R packages, the first message you will see will probably be something like (on Windows):\nInstalling packages into ‘c:/Users/USER/Documents/R/win-library/4.0’\n(as ‘lib’ is unspecified)\nThis folder is where all of the R packages you install via install.packages() will live. If you ever need to look this up, you can use the .libPaths() function.\nSometimes, your R session will issue a warning that says a folder is not writeable and asks if you would like to use a personal library instead. In this case, select “yes”.\n\n\nLocal Clones\n\nHow do I update my clone after the transition from styles?\nThe easiest way is to rename your local clone to old-NAME (where NAME is the name of your repository folder) and then re-clone the lesson. You can find details on updating your local clone on the beta phase page.\n\n\n\nGitHub Forks\n\nHow do I update my fork after the transition from styles?\n\n\n\n\n\n\nBefore you read further\n\n\n\nThis is only applicable if you have created a fork of the lesson before 2023-02-06.\n\n\n\n\n\n\n\n\nDo not “synchronise” your fork\n\n\n\nIf you attempt to synchronise your fork from the GitHub interface and create a pull request, that pull request will fail. Instead, follow the instructions below.\n\n\nThe easiest way to do this is to delete your fork and re-clone. The commit history of the lesson has changed and you will be unable to commit until your fork reflects those changes (this is known as the burn it all down strategy):\n\nSave your edits on locally or in a scratch space.\nDelete your fork\nCreate a new fork or use the “edit” button on the page you wish to edit.\nApply your changes (NOTE The Workbench uses a different syntax. Here is a Transition Guide from Styles to Workbench for your reference).\n\nNote that if you have a clone, you will need to also delete and re-clone.\n\n\n\n\n\n\n\n\nProduction Forks\n\n\n\nIf you have a fork of a lesson that you have modified significantly and wish to continue maintaining under The Workbench, contact Zhian Kamvar and he will help you transition your repository.\n\n\n\n\n\n\n\n\ncontributing without deleting\n\n\n\nIf you contribute directly on the lesson itself using the “edit” button on GitHub, a new branch will be created for you and you can edit on that branch without deleting your fork.\nThis method is not recommended because it runs the risk that you will accidentally merge histories in your fork."
  },
  {
    "objectID": "faq.html#teaching",
    "href": "faq.html#teaching",
    "title": "Frequently Asked Questions",
    "section": "Teaching",
    "text": "Teaching\n\nGitHub Forks\n\nHow do I create a fork for teaching?\nA common pattern for teaching is to create a fork of a lesson, modify it to add or remove specific section. Because the pages on The Workbench are deployed by GitHub actions, there are a couple of extra steps you need to do to enable the pages to load after the transition.\nIn short, when you fork, to make it easier, you should bring in all branches, enable GitHub pages, and enable GitHub Actions. After that, you will have your lesson website and can teach from it.\nYou can find the instructions in issue 14 of the Dovetail blog series.\n\n\n\nWorkshop Websites\n\nHow do I add episodes to my workshop website?\nBefore 2020, instructors were occasionally encouraged to copy the episodes from a lesson into their workshop website to avoid situations where the lesson would change significantly while the workshop was being taught. In short, you can not do this. Instead, you can make a fork of the lesson and link that on your workshop website.\n\n\n\n\n\n\nComing up: versioned lessons\n\n\n\nIn the future, we will implement lesson versioning where you will be able to select a specific version of a lesson to teach from, so that you can always be sure that the content is stable.\n\n\n\n\n\n\n\n\nLow-rent versioning with HTMLpreview\n\n\n\nThe website https://htmlpreview.github.io allows you to display HTML pages hosted on GitHub without needing to set up GitHub pages. If you do not want to fork, but still want a working version you can teach from, you can head to a workbench repository, select the gh-pages branch, select the index.html file and click on copy permalink and paste that into html preview:\nFor example: this is the workbench documentation as of 2023-02-07: https://htmlpreview.github.io/?https://github.com/carpentries/sandpaper-docs/blob/59651a69e7716c04edaf8f9c1c79abc18ce3e476/index.html\nThis is a very workable version of the lesson (with some styling differences as the default font could not be loaded).\nThe only catch is that you have to manually switch to instructor view by the URL: https://htmlpreview.github.io/?https://github.com/carpentries/sandpaper-docs/blob/59651a69e7716c04edaf8f9c1c79abc18ce3e476/instructor/index.html\nAnd there you have a quick version of the lesson."
  },
  {
    "objectID": "faq.html#learning",
    "href": "faq.html#learning",
    "title": "Frequently Asked Questions",
    "section": "Learning",
    "text": "Learning"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The Carpentries Workbench",
    "section": "",
    "text": "Workbench Beta Phase\n\n\n\nWe are testing use of The Workbench on a small number of official lessons.\nLearn more about how to participate in the Beta Phase.\nThe Workbench is a complete redesign of The Carpentries lesson websites, with new features prioritising accessibility and navigation. All Carpentries lessons will begin using The Carpentries Workbench in May 2023."
  },
  {
    "objectID": "index.html#resources",
    "href": "index.html#resources",
    "title": "The Carpentries Workbench",
    "section": "Resources",
    "text": "Resources\n\nInstallation\nTo install the workbench, make sure you have a working version of R and pandoc/RStudio installed (see the workbench setup instructions for details).\nFrom there, you can install the workbench packages and their dependencies from our Carpentries R Universe:\ninstall.packages(c(\"sandpaper\", \"varnish\", \"pegboard\", \"tinkr\"),\n  repos = c(\"https://carpentries.r-universe.dev/\", getOption(\"repos\")))\n\n\nUpdating\nTo update workbench packages, you can use the same command as you did to install your packages:\ninstall.packages(c(\"sandpaper\", \"varnish\", \"pegboard\", \"tinkr\"),\n  repos = c(\"https://carpentries.r-universe.dev/\", getOption(\"repos\")))\n\n\nGuides\n\nGlossary A glossary of terms for The Workbench.\nOfficial Workbench Documentation: written using The Workbench, this guide provides everything you need to get started using The Workbench.\nCollaborative Lesson Development Training: Material for a three day workshop teaching good practices in lesson design and open source collaboration skills\n\n\n\nTools\n\n{sandpaper}: User interface and engine for the workbench\n{pegboard}: Validation and parsing of lesson components\n{varnish}: HTML, CSS, and JavaScript templates\n(carpentries/actions): GitHub Actions for Workbench Workflows\n(carpentries/lesson-transition): Tool for automated transition from styles-based lessons to Workbench.\n\n\n\nTemplates\n\nR Markdown Lesson Template\nMarkdown Lesson Template\n\n\n\nInspired Examples\nThese are examples of lessons developed with The Workbench since the initial announcement:\n\nToby Hodges, Mateusz Kuzak, Aleksandra Nenadic, Sarah Stevens—Collaborative Lesson Development Training\nSaranjeet Kuar, Achintya Rao, Heather Turner, Aman Goel—R’s Bug Tracking\nSaba Ferdous, David Pérez-Suárez—Learn To Discover—Basic Python (note—this uses a custom fork of sandpaper, and varnish to run python)\nPhilipp Matthias Schäfer—GitLab Novice\nMichael Culshaw-Maurer—Rewrite of the R Ecology Lesson"
  },
  {
    "objectID": "reference.html",
    "href": "reference.html",
    "title": "Reference",
    "section": "",
    "text": "Below are terms used in association with The Carpentries Workbench.\n\nworkbench\n\nthe collection of three packages used to build Carpentries lessons. NOTE: this is no longer called the “template”.\n\nlesson source\n\na collection of standard files and folders generated from a [lesson template])#template) that The Workbench uses to build a lesson website\n\nlesson website\n\nAn HTML website built by The Workbench.\n\n{sandpaper}\n\nthe package that lesson contributors interact with. This orchestrates the building of lessons from markdown/rmarkdown to html\n\n{pegboard}\n\nthe validator for our lesson content.\n\n{varnish}\n\nhtml, css, and javascript styling for our lessons.\n\ncarpentries/actions\n\nAutomation for deploying and updating our lessons on GitHub\n\ntemplate\n\nA standard set of files that are used to create a Carpentries lesson. The lesson author is expected to customise and modify these files with their own custom lesson content.\n\nMarkdown Lesson Template\n\nhttps://bit.ly/new-lesson-md a GitHub repository template to create a new lesson written in markdown using The Workbench\n\nR Markdown Lesson Template\n\nhttps://bit.ly/new-lesson-rmd a GitHub repository template to create a new lesson written in R Markdown using The Workbench\n\nOfficial Lessons\n\nLessons within our Official Curriculum that are offered in Centrally-Organised or Self-Organised workshops. Community Lessons Lessons that are developed by community members, but are not offered in centrally-organised workshops\n\nToolchain\n\nA series of software tools that work together to accomplish a specific task. E.g. The Carpentries Workbench is a toolchain built with R and pandoc to publish accessible lesson websites from markdown or R Markdown content.\n\nStyles (aka lesson template)\n\nThis is the lesson infrastructure established in 2016 and can be found at https://github.com/carpentries/styles. It uses Jekyll for rendering markdown to HTML with a Make-based workflow. The Carpentries Workbench supersedes this infrastructure. This particular infrastructure required that the tools and templates were embedded within the lesson itself, meaning that updates were often cumbersome.\n\nLesson infrastructure\n\nThe collection tools and templates required to build Carpentries-style lessons.\n\nLesson-transition tool\n\nA custom toolchain that prepared existing lessons to use The Carpentries Workbench: https://github.com/carpentries/lesson-transition. This would transform markdown syntax from Kramdown to Pandoc-flavoured markdown and it would remove commits unrelated to the lesson content.\n\nJekyll\n\nA static site generator that is used by default to build websites on GitHub from markdown.\n\nKramdown\n\nThe default flavour of markdown used by Jekyll. It is originally based off of a PHP variant of the original markdown syntax that is not widely used.\n\nPandoc-flavoured markdown\n\nA style of markdown that is derived from CommonMark and is the basis for the pandoc document converter https://pandoc.org/MANUAL.html#pandocs-markdown.\n\nFishtree Attempt\n\nGitHub organisation to host testing repositories of the transformed lessons.\n\nBeta Phase\n\nThis is the phase in which lessons are tested with maintainers, instructors, and learners to evaluate any potential snags in the websites that should be fixed before converting all of our lessons. This is divided into three stages for each lesson.\n\nPre-beta stage (8 weeks)\n\na snapshot of a lesson is converted to the workbench in a separate github organisation and hosted on a temporary url (preview.carpentries.org/<lesson>). A banner is hosted on the github URL indicating a beta test with a link to the new url.\n\nBeta stage (8 weeks)\n\na lesson release and archive is created. The lesson is converted to the workbench and hosted on (preview.carpentries.org/). The github URL hosts the snapshot of the lesson at the given release and has a link to the new URL, indicating that it is the up-to-date version.\n\nRelease Candidate (24 weeks)\n\nThe default URL will now show the Workbench version of the lesson and the styles version of the lesson will be archived. During this time, any imperfections in the transition are to be addressed by the maintainers."
  }
]
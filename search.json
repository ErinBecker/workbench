[
  {
    "objectID": "beta-phase.html",
    "href": "beta-phase.html",
    "title": "Beta Phase of The Carpentries Workbench",
    "section": "",
    "text": "The Carpentries Workbench, first released in January 2022, has been running without issue for several months with several early adopters, who have all contributed to its improvement from their feedback. It is now at the stage where we are confident that it is in a stable condition to be used for Carpentries Lessons as a whole. Of course, with over 100 maintainers and even more instructors, making a sudden change has the potential to be massively disruptive.\nInstead, we are slowly releasing The Workbench in three stages per lesson over a 12 week period during which there will be parallel websites showing two versions of the same lesson1. For example, when you visit https://datacarpentry.org/R-ecology-lesson, there will be a banner at the top of every page that will give a link to the beta version of the lesson (under https://preview.carpentries.org/) and the dates the styles version will be deprecated and finally superseded.\n\n\nThis slow progression is designed to allow community members to familiarlize themselves with the new format and to build expertise within the community for April 2022 when the infrastructure is formally released.\nThe three stages are called “pre-beta”, “beta”2, and “pre-release”.\n\n\n\nAn overview of the Workbench beta phase for the Git repository and the website, separated into three stages. The entire process will take about 12 months until the pre-beta stage.\n\n\n\n\nLessons in this stage will have a workbench version of the lesson live in a separate repository in a sandbox GitHub organisation. This version will be a snapshot from the date of the pre-beta version. Any changes made to the snapshot will appear on the beta website, but will disappear as soon as the lesson enters beta. Maintainers are encouraged to clone this snapshot repository and try it out by creating pull requests that change content.\n\n\n\nLessons in this stage will undergo a lesson release of the styles version and a snapshot of the repository, including issues and pull requests, will be archived. The branch serving the github pages will be frozen and renamed to “legacy” and will continue to serve to GitHub Pages.\nThe workbench version of the repository will be inserted as the “main” branch with a modified history to remove all commits from styles and generated content3. All new changes to the lesson will be made to the workbench version.\nMaintainers will continue to work on this workbench version of the lesson.\n\n\n\nThe styles version of the lesson (in the legacy branch) will be removed, the default version of the lesson will switch to The Workbench, and the workbench-beta website will redirect to the live lesson."
  },
  {
    "objectID": "beta-phase.html#timeline-lessons-entered-into-workbench-beta",
    "href": "beta-phase.html#timeline-lessons-entered-into-workbench-beta",
    "title": "Beta Phase of The Carpentries Workbench",
    "section": "Timeline: Lessons Entered into Workbench Beta",
    "text": "Timeline: Lessons Entered into Workbench Beta\n\n\nOfficial Lessons\nThese are the official Carpentries lessons that will enter the Beta Phase during 2022-Q4 and 2023-Q1. The dates in the columns reflect the anticipated dates for the transitions of the different stages of the Beta Phase. Note that any stage that overlaps the last week of December and the first week of January will be extended by two weeks due to Winter holidays.\n\n\n\nLesson\nPre-Beta\nBeta\nPre-release\n\n\n\n\ndatacarpentry/R-ecology-lesson—Data Analysis and Visualization in R for Ecologists (✅ approved by maintainers)\n2022-10-17\n2022-11-14\n2023-01-23\n\n\ndatacarpentry/r-socialsci—R for Social Scientists (✅ approved by maintainer)\n2022-10-24\n2022-11-21\n2023-01-30\n\n\ndatacarpentry/r-raster-vector-geospatial—Introduction to Geospatial Raster and Vector Data with R (✅ approved by maintainers)\n2022-10-31\n2022-11-28\n2023-02-06\n\n\ndatacarpentry/OpenRefine-ecology-lesson—Data Cleaning with OpenRefine for Ecologists (✅ approved by maintainer)\n2022-11-07\n2022-12-05\n2023-02-13\n\n\nlibrarycarpentry/lc-shell—Library Carpentry: The UNIX Shell (⏳ awaiting responses)\n2022-11-14\n2022-12-12\n2023-02-20\n\n\ncarpentries/instructor-training—Instructor Training (⏳ awaiting responses)\n2022-11-28\n2023-01-09\n2023-03-06\n\n\ndatacarpentry/python-ecology-lesson-es—Análisis y visualización de datos usando Python (✅ approved by maintainers)\n2022-12-05\n2023-01-16\n2023-03-13\n\n\n\n\n\n\n\ngantt\n    dateFormat  YYYY-MM-DD\n    axisFormat  %d %b\n    title       Tentative Schedule For Lessons in Workbench Beta\n\n    Beta Phase Start   :milestone, 2022-10-17,\n    section DC/R For Ecologists\n    Pre Beta           :      dcre-pb, 2022-10-17, 28d\n    Beta               :      dcre-b, after dcre-pb, 70d\n    Pre-release        :milestone, crit, after dcre-b\n\n    section DC/R Social Sciences\n    Pre Beta           :      dcrs-pb, 2022-10-24, 28d\n    Beta               :      dcrs-b, after dcrs-pb, 70d\n    Pre-release        :milestone, crit, after dcrs-b\n\n    section DC/R Raster Vector Geospatial\n    Pre Beta           :      dcrvg-pb, 2022-10-31, 28d\n    Beta               :      dcrvg-b, after dcrvg-pb, 70d\n    Pre-release        :milestone, crit, after dcrvg-b\n\n    section DC/OpenRefine Ecology\n    Pre Beta           :      dcore-pb, 2022-11-07, 28d\n    Beta               :      dcore-b, after dcore-pb, 70d\n    Pre-release        :milestone, crit, after dcore-b\n\n    section LC/Intro to Shell\n    Pre Beta           :      lcs-pb, 2022-11-14, 28d\n    Beta               :      lcs-b, after lcs-pb, 70d\n    Pre-release        :milestone, crit, after lcs-b\n    \n    section Instructor Training\n    Pre Beta           :      it-pb, 2022-11-28, 42d\n    Beta               :      it-b, after it-pb, 56d\n    Pre-release        :milestone, crit, after it-b\n    \n    section DC/Python Ecology ES\n    Pre Beta           :      pes-pb, 2022-12-05, 42d\n    Beta               :      pes-b, after pes-pb, 56d\n    Pre-release        :milestone, crit, after pes-b\n\n\n\n\n\n\n\n\n\n\nCommunity Lessons\nThe following community lessons will be migrated to the Workbench during the beta phase. At the moment, there is no definite timeline, but we will update that soon. Note that these lessons will skip directly from pre-beta into pre-release.\n\ncarpentries-incubator/git-novice-branch-pr—Version Control with Git\ncarpentries-incubator/data-management-pipelines-engineering—Data management and analytic pipelines for engineers\ncarpentries-incubator/markdown-intro—Introduction to Markdown\ncarpentries-incubator/SDC-BIDS-IntroMRI—Introduction to MRI and BIDS\ncarpentries-incubator/SDC-BIDS-dMRI—Introduction to dMRI\ncarpentries-incubator/SDC-BIDS-fMRI—fMRI Imaging Analysis\ncarpentries-incubator/julia-novice—A lesson exploring the Julia language\ncarpentries-incubator/R-archaeology-lesson\ncarpentries-incubator/python-packaging-publishing—Packaging and Publishing with Python"
  },
  {
    "objectID": "transition-guide.html",
    "href": "transition-guide.html",
    "title": "Transition Guide: From Styles to Workbench",
    "section": "",
    "text": "The Carpentries Workbench is a replacement for the former carpentries/styles lesson infrastructure. Lessons using The Carpentries Workbench have content separated from styling and build tools for a more seamless experience in updates to the lesson websites. In 2023, all lessons in official Carpentries lesson programs will use The Workbench and will be converted using the lesson-transition tool.\nThis document is intended to provide you with a quick reference about the differences between kramdown (used by styles) and pandoc-flavoured markdown (used by The Workbench):"
  },
  {
    "objectID": "transition-guide.html#default-branch",
    "href": "transition-guide.html#default-branch",
    "title": "Transition Guide: From Styles to Workbench",
    "section": "Default Branch",
    "text": "Default Branch\n\n\n\n\nWorkbench\nThe default branch is always main\n\n\n\n\nstyles\nThe default branch is gh-pages UNLESS you have rendered RMarkdown content, then the default branch is main"
  },
  {
    "objectID": "transition-guide.html#infrastructure",
    "href": "transition-guide.html#infrastructure",
    "title": "Transition Guide: From Styles to Workbench",
    "section": "Infrastructure",
    "text": "Infrastructure\n\n\n\n\nWorkbench\nThe workbench infrastructure is independent1 from individual lessons. It consists of three major pieces of software.\n\nGit \nR\nPandoc\n\nThe workbench itself consists of three R packages, which can all be updated on the fly with no changes to the lesson.\n\n{sandpaper}: user interface and workflow engine\n{pegboard}: parsing and validation engine\n{varnish}: HTML templates, CSS, and JS elements\n\n\n\n\n\nstyles\nThe styles infrastructure is embedded within the lesson itself. It requires the following major pieces of software to run:\n\nGit\nRuby\nBASH\nMake\nPython2\nR3\n\nThe styles workflow is a Jekyll-based workflow, which uses the following components:\n\nbundler: manages the Ruby gems (packages) including Jekyll\nJekyll: static site generator\n(file) Makefile: workflow management for building and validating\n(dir) assets/: CSS and JS elements\n(dir) _layouts/: HTML templates\n(dir) bin/: intialisation, runtime, and validation scripts (in BASH, Python, and R)\n(dir) _includes/: Markdown and HTML boilerplate for customisation\n\nThe file components can only be updated via pull request."
  },
  {
    "objectID": "transition-guide.html#local-rendering",
    "href": "transition-guide.html#local-rendering",
    "title": "Transition Guide: From Styles to Workbench",
    "section": "Local Rendering",
    "text": "Local Rendering\n\n\n\n\nWorkbench\n\nIf you haven’t already, Follow the setup instructions for the workbench to install R, pandoc, and the workbench packages\nIn your lesson directory, open either R, RStudio, or VS Code and run:\n\nsandpaper::serve()\n\n\n\n\nstyles\n\nIf you haven’t already, Follow the setup instructions for styles to install Ruby, Bundler, Jekyll, Make, Python, and BASH\nIn your lesson directory, open your command line and run:\n\nmake serve"
  },
  {
    "objectID": "transition-guide.html#folder-structure",
    "href": "transition-guide.html#folder-structure",
    "title": "Transition Guide: From Styles to Workbench",
    "section": "Folder Structure",
    "text": "Folder Structure\nThe folders from styles to Workbench are rearranged to achieve the following goals:\n\ntools for building the lesson do not live in the lesson 4.\nthe episodes can be directly lifted from the lesson without needing external context/resources.\nextra content intended for instructors is clearly separated from that intended for learners\n\nEpisodes (aka Chapters) will move from _episodes/ and _episodes_rmd to the single folder episodes/. _extras/ content will be split into learners/ and instructors/ depending on the context of the content. Figures, data, and files all become subfolders of episodes/."
  },
  {
    "objectID": "transition-guide.html#navigation",
    "href": "transition-guide.html#navigation",
    "title": "Transition Guide: From Styles to Workbench",
    "section": "Navigation",
    "text": "Navigation\n\n\n\n\n\nWorkbench\nEpisode and setup information is located on the left hand side of the page. Navigation in the workbench is split between information for learners and information for instructors. The top right of the page has a toggle button between Learner and Instructor views, which change the four main navigation items in the top navigation bar.\n\nLearner View\nWhen this is toggled, the main navigation contains the following menu items: Key Points, Glossary, Learner Profiles, and More. The “More” dropdown menu contains information for learners from the learners/ folder aside from the setup instructions.\n\n\n\nInstructor view\nWhen this is toggled, the main navigation contains the following menu items: Key Points, Instructor Notes, Extract All Images, and More. The “More” dropdown menu contains information for learners from the instructors/ folder.\nIn addition, the schedule now appears on the home page, instructor notes are displayed inline, and the estimated timings for a lesson appear.\n\n\n\n\n\n\nstyles\nNavigation in the styles repository is relegated to a single menubar at the top of the lesson with seven items: Home, Code of Conduct, Setup, Episodes (dropdown), Extras (dropdown), License, and Improve This Page.\n\n\n\n\n\n\n\nPerceived simplicity\n\n\n\nWhile the styles repositories appear to be simpler, there were several components of lessons (such as instructor notes and glossary terms) that were not clearly available to learners or instructors. Moreover, in cases like instructor training, where there was much extra content for both learners and instructors, it was not easy to look at the “Extra” menu and determine what content was appropriate for a learner or an instructor."
  },
  {
    "objectID": "transition-guide.html#setup-information",
    "href": "transition-guide.html#setup-information",
    "title": "Transition Guide: From Styles to Workbench",
    "section": "Setup Information",
    "text": "Setup Information\n\n\n\n\n\nWorkbench\nThe setup instructions are located on the home page at the #setup anchor.\nThe setup information lives in learners/setup.md or learner/setup.Rmd, depending on whether or not you need code generated. Access this file from episodes with\n[setup instructions](../learners/setup.md)\n\n\n\n\nstyles\nThe setup instructions are in a separate page called /setup\nThe setup information lives in the top level of the lesson at setup.md (no possibility to render generated content). Access this file from episodes with\n[setup instructions]({{ page.root }}/setup.md)"
  },
  {
    "objectID": "transition-guide.html#callout-blocks",
    "href": "transition-guide.html#callout-blocks",
    "title": "Transition Guide: From Styles to Workbench",
    "section": "Callout Blocks/Special Blockquotes",
    "text": "Callout Blocks/Special Blockquotes\n\n\n\n\n\nWorkbench\nA callout block with The Workbench uses at least three colons followed by a keyword to start a block. The block is closed with at least three colons.\n\n\n\n\n\n\nNote\n\n\n\nYou can find a demonstration of all the possible callout blocks in the workbench component guide\n\n\n:::: callout\n\n### Act Openly\n\nWe believe that transparency, honesty, and fairness are keys to fostering\ntrust within an open community.\n\n::::::::::::\n\n\n\n\n\n\nTip\n\n\n\nThese are called fenced divs and in Workbench lessons, you will often see them have many more colons to clearly delineate sections in a lesson. The number of opening colons and the number of closing colons do not match and it is completely up to the lesson author to choose a style.\n\n\n\n\n\n\nstyles\nA callout block (aka “Special Blockquote”) with styles used block quote syntax and level 2 headers followed by a postfix tag declaring the class of block\n\n\n\n\n\n\nNote\n\n\n\nYou can find a demonstration of all the possible callout blocks in the styles “Special Blockquotes” guide\n\n\n> ## Act Openly\n>\n> We believe that transparency, honesty, and fairness are keys to fostering\n> trust within an open community.\n>\n{: .callout}\n\n\n\n\n\n\nDid you know?\n\n\n\nThe decision to use blockquotes was to facilitate an easy way to author special sections without having lesson authors/contributors type <div> tags into the document."
  },
  {
    "objectID": "transition-guide.html#highlighted-code-blocks",
    "href": "transition-guide.html#highlighted-code-blocks",
    "title": "Transition Guide: From Styles to Workbench",
    "section": "Highlighted Code Blocks",
    "text": "Highlighted Code Blocks\n\n\n\n\n\nWorkbench\nCode fences in the workbench are indicated by fences that consist of three backticks (```) with the name of the language appended on the opening fence:\nclean all merged branches from git\n\n```bash\ngit branch --merged | grep -v '^\\*' | xargs git branch -d\n```\n\n\n\n\nstyles\nCode fences in styles follow kramdown syntax, which prefers fences that consist of three tildes (~~~) with the liquid tag of the language appended on a new line after the closing fence (postfix tag):\nclean all merged branches from git\n\n~~~\ngit branch --merged | grep -v '^\\*' | xargs git branch -d\n~~~\n{: .language-bash}"
  },
  {
    "objectID": "transition-guide.html#challengesolution-blocks",
    "href": "transition-guide.html#challengesolution-blocks",
    "title": "Transition Guide: From Styles to Workbench",
    "section": "Challenge/Solution blocks",
    "text": "Challenge/Solution blocks\n\n\n\n\n\nWorkbench\nThe challenge and solution blocks in the workbench are nested pairs of blocks with an optional Level 3 header. You can additonally add a “hint” block before the solution.\n::::::::::::::::::::::::::::: challenge\n\n### Challenge: build\n\nWhat is the R command to build a Workbench lesson?\n\n::::::: hint\n\nThis command is going to start a **serve**r on your computer\n\n:::::::::::::\n\n::::::::: solution\n\n```r\nsandpaper::serve()\n```\n\n::::::::::::::::::\n:::::::::::::::::::::::::::::::::::::::\n\n\n\n\n\n\nTip\n\n\n\nTo help distinguish sections, double the number of columns for the outer section compared to the inner section.\n\n\n\n\n\n\nstyles\nThe challenge and solution blocks in the workbench are nested block quotes with Level 2 headers. Additional blocks are still of the class “solution”\n> ## Challenge: build\n> \n> What is the R command to build a Workbench lesson?\n> \n> > ## Hint\n> >\n> > This command is going to start a **serve**r on your computer\n> > \n> {: .solution} \n>\n> > ~~~\n> > sandpaper::serve()\n> > ~~~\n> > {: .language-r}\n> {: .solution} \n{: .challenge}"
  },
  {
    "objectID": "transition-guide.html#questionsobjectiveskeypoints",
    "href": "transition-guide.html#questionsobjectiveskeypoints",
    "title": "Transition Guide: From Styles to Workbench",
    "section": "Questions/Objectives/Keypoints",
    "text": "Questions/Objectives/Keypoints\n\n\n\n\n\nWorkbench\nQuestions and Objectives appear at the top of the lesson as fenced divs with list elements:\n---\ntitle: \"Bomp\"\nteaching: 5\nexercises: 5\n---\n\n::::::::::::::::: questions\n\n - Who put the **bomp** in the bomp bah bomp bah bomp?\n - Who put the **ram** in the rama lama ding dong?\n\n:::::::::::::::::::::::::::\n\n::::::::::::::::: objectives\n\n - Solve the \"bomp\" mystery.\n\n::::::::::::::::::::::::::::\n\n## Introduction\n\n...\nKeypoints should go in a fenced div at the end of the document:\n...\n\n::::::::::::::::: keypoints\n\n - We will never know who put the bomp in the bomp bah bomp bah bomp.\n\n:::::::::::::::::::::::::::\n\n\n\n\nstyles\nThe questions, objectives, and keypoints were placed in the YAML metadata for each episode:\n---\ntitle: \"Bomp\"\nteaching: 5\nexercises: 5\nquestions:\n - \"Who put the bomp in the bomp bah bomp bah bomp?\"\n - \"Who put the ram in the rama lama ding dong?\"\nobjectives:\n - \"Solve the \\\"bomp\\\" mystery.\"\nkeypoints:\n - \"We will never know who put the bomp in the bomp bah bomp bah bomp.\" \n---\n\n## Introduction\n\n...\n\n\n\n\n\n\nThe trouble with YAML metadata\n\n\n\nIt was not possible to include markdown inside these strings and it often caused errors due to missed quotation marks (i.e. - \"sentence with a period after quotes\". was a common type of error.)\nThis content was originally introduced into the YAML metadata so that we could use Jekyll’s metadata parsing to create a custom introductory block."
  },
  {
    "objectID": "transition-guide.html#instructor-notes",
    "href": "transition-guide.html#instructor-notes",
    "title": "Transition Guide: From Styles to Workbench",
    "section": "Instructor notes",
    "text": "Instructor notes\n\n\n\n\n\nWorkbench\nAn inline instructor note in the workbench is formed inside an episode by making a fenced div with the class “instructor”\n:::: instructor\n\nHere be dragons\n\n::::::::::::\nInstructor notes for the whole lesson can be placed in instructors/instructor-notes.md\n\n\n\n\nstyles\nInstructor notes do not exist in styles other than an aggregate markdown file called _extras/guide.md"
  },
  {
    "objectID": "transition-guide.html#internal-links",
    "href": "transition-guide.html#internal-links",
    "title": "Transition Guide: From Styles to Workbench",
    "section": "Internal Links",
    "text": "Internal Links\n\n\n\n\n\nWorkbench\nLinks in the Workbench are relative to the file so that you can link to the files and confirm they work in the github preview. Figures, files, and data are nested inside the episodes/ folder.\n<!-- Next Episode -->\n[next episode on dragons](dragons.md)\n<!-- Data -->\n[download the dragon data for this episode](data/dragon-lifespan.csv)\n<!-- Setup -->\n[setup instructions](../learners/setup.md)\n\n\n\n\nstyles\nLinks are relative to the page that they are rendered to. You should use the {{ page.root }} variable and the link tag in order to construct the correct path to the resource:\n<!-- Next Episode -->\n[next episode on dragons]({{ page.root }}{% link _episodes/dragons.md %})\n<!-- Data -->\n[download the dragon data for this episode]({{ page.root }}/data/dragon-lifespan.csv)\n<!-- Setup -->\n[setup instructions]({{ page.root }}/setup.md)"
  },
  {
    "objectID": "transition-guide.html#figures",
    "href": "transition-guide.html#figures",
    "title": "Transition Guide: From Styles to Workbench",
    "section": "Figures",
    "text": "Figures\n\n\n\n\n\nWorkbench\nFigures are written with the caption in the square brackets and alt appended as an attribute like so: ![caption](fig/image.png){alt='image description'}.\n![The dragon emerges!](fig/dragon-egg.png){alt='a red baby \ndragon head sticks out from its egg'}\n\n\n\n\n\n\nNote\n\n\n\nThere is a valid reason behind this choice: text inside of the square brackets can be formatted as markdown, so it makes sense for the caption. Alt text needs no decoration as it will be descriptive.\n\n\n\n\n\n\nstyles\nFigures are written with alt text in the square brackets, but no caption like so: ![alt text]({{ page.root }}/fig/image.png)\n![a red baby dragon head sticks out from its egg]({{ page.root }}/fig/dragon-egg.png)\n\nThe dragon emerges!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The Carpentries Workbench",
    "section": "",
    "text": "The Workbench is an accessible lesson infrastructure built in R\n\n\n\n\n\n\n\n\n\nInstallation\n\n\n\nTo install the workbench, make sure you have a working version of R and pandoc/RStudio installed (see the workbench setup instructions for details).\nFrom there, you can install the workbench packages and their dependencies from our Carpentries R Universe:\ninstall.packages(c(\"sandpaper\", \"varnish\", \"pegboard\", \"tinkr\"),\n  repos = c(\"https://carpentries.r-universe.dev/\", getOption(\"repos\")))\n\n\n\n\n\n\n\n\nWorkbench Beta Phase\n\n\n\nThe Carpentries Workbench is currently in its Beta Phase, undergoing testing for the broader Carpentries Community including, but not limited to:\n\nMaintainers (Official Lessons)\nLesson Developers (Community-curated Lessons)\nInstructors\nTrainers\nLearners\n\nIf you would like to participate in the beta phase, you can\n\nfind out more about our workbench through our Resource Guide,\nintroduce yourself, and\ngive feedback via GitHub Discussions\n\n\n\n\n\n\n\n\nOfficial Workbench Documentation\nCollaborative Lesson Development Training\nWorkbench Beta Phase\n\n\n\n\n\n{sandpaper}: User interface and engine for the workbench\n{pegboard}: Validation and parsing of lesson components\n{varnish}: HTML, CSS, and JavaScript templates\n(carpentries/actions): GitHub Actions for Workbench Workflows\n(carpentries/lesson-transition): Tool for automated transition from styles-based lessons to Workbench.\n\n\n\n\n\nR Markdown Lesson Template\nMarkdown Lesson Template\n\n\n\n\nThese are examples of lessons developed with The Workbench since the initial announcement:\n\nToby Hodges, Mateusz Kuzak, Aleksandra Nenadic, Sarah Stevens—Collaborative Lesson Development Training\nSaranjeet Kuar, Achintya Rao, Heather Turner, Aman Goel—R’s Bug Tracking\nSaba Ferdous, David Pérez-Suárez—Learn To Discover—Basic Python (note—this uses a custom fork of sandpaper, and varnish to run python)\nPhilipp Matthias Schäfer—GitLab Novice\nMichael Culshaw-Maurer—Rewrite of the R Ecology Lesson"
  },
  {
    "objectID": "releases.html",
    "href": "releases.html",
    "title": "How Packages for The Carpentries Workbench Are Released",
    "section": "",
    "text": "The workbench contains three main packages:\n\n{sandpaper}: user interface and workflow engine\n{pegboard}: parsing and validation engine\n{varnish}: HTML templates, CSS, and JS elements\n\nEach of these packages are available on the Carpentries R-Universe and new versions are checked for hourly. This allows folks to get up-to-date versions of The Workbench packages built for their system without running out of GitHub API query attempts.\nIn order to maintain quality, packages are only sent to the R-Universe if they have been formally released on GitHub (as specified in the packages.json configuration file). This allows us to incrementally add new experimental features without changing the stable deployments."
  },
  {
    "objectID": "releases.html#release-process",
    "href": "releases.html#release-process",
    "title": "How Packages for The Carpentries Workbench Are Released",
    "section": "Release Process",
    "text": "Release Process\nWhen a package is ready for release we use the following checklist:\n\nUpdate version number in DESCRIPTION\nAdd NEWS for the changes in this version\nEnsure all changes are committed and pushed\nadd new signed tag with the name “ X.Y.Z”# example: create a signed (-s) tag for sandpaper 3.3.3\ngit tag -s 3.3.3 -m 'sandpaper 3.3.3'\ncreate a release on github from the new tag\n\n\n\n\n\n\n\nNote\n\n\n\nZhian likes to create tags via the command line because he has set up his git configuration to use a gpg signature so the tags and the releases are both verified.\n\n\nThe last two items can be achieved in a single step with the github cli with the command gh release create X.Y.Z for the version number\ngh release create 3.3.3\n# ? Title (optional) sandpaper 3.3.3\n# ? Release notes  [Use arrows to move, type to filter]\n#   Write my own\n# > Write using generated notes as template\n#   Leave blank\nSelecting “Write using generated notes as a template” opens an editor and populates it with the pull requests that have been accepted since the last release.\nOnce the relase is created on GitHub, then the package will be available on the R-Universe in about an hour or less."
  },
  {
    "objectID": "workflow-guide.html",
    "href": "workflow-guide.html",
    "title": "Behind the Scenes of The Carpentries Workbench",
    "section": "",
    "text": "The Carpentries Workbench is the set of R packages and other tools that make it easy for anyone to create and contribute to a Carpentries Lesson and it was designed with the following guiding principles:\n\nLesson contributors do not need to know anything about the toolchain to contribute in a meaningful way,\nElements of the toolchain that evaluates, validates, and stylizes should live in separate repositories to allow for seamless updating, and\nThe procedures should be well-documented and generalizable enough that the toolchain is not entirely dependent on R.\n\nThis document provides details of how the packages of the workbench work behind the scenes to create a full Carpentries lesson website from markdown source file.\n\n\nThe Workbench is built on top of the following major pieces of software, all of which are available via RStudio\n\nGit \nR\nPandoc\n\nThe workbench itself consists of three R packages, which can all be updated on the fly with no changes to the lesson.\nThere are three packages that comprise The Workbench:\n\n{sandpaper}: User interface and engine for the workbench\n{pegboard}: Validation and parsing of lesson components\n{varnish}: HTML, CSS, and JavaScript templates\n\nIn addition, The workbench uses the following packages for support:\n\n{knitr}: engine that renders R Markdown documents to Markdown\n{tinkr}: converts Markdown to an XML representation for {pegboard} to parse\n{pkgdown}: provisioning and applying HTML templates\n{gert}: interface to git with or without a local installation."
  },
  {
    "objectID": "workflow-guide.html#local-workflow",
    "href": "workflow-guide.html#local-workflow",
    "title": "Behind the Scenes of The Carpentries Workbench",
    "section": "Local Workflow",
    "text": "Local Workflow\n\nThe two-step\nThe local workflow is known as a ‘two-step’ workflow, which renders markdown from the source files (either Markdown or R Markdown) and then applies the styling to HTML rendered from these Markdown sources.\n\n\n\nThe local two-step model of deployment into local folders\n\n\n\n\n\n\n\n\nNote\n\n\n\nOnly the source files here are tracked by Git. Everything else is ignored locally.\n\n\nWe use the two-step process because it provides us an air-gap between the tools needed to build the markdown and the tools needed to render the website. It also provides us a ready cache of outputs so that R Markdown source content does not need to be re-rendered. Moreover, we designed these tools to be independent from each other so that if, in the future, we can mix and match with different tools as they become available.\n\n\n\n\n\n\nNote\n\n\n\nThe two-step process is not new; the {rmarkdown} package uses this process behind the scenes, but it will discard the markdown output by default.\n\n\n\n\nValidation\nLesson validation is performed by {pegboard} by parsing Markdown and evaluating the elements for low-hanging fruit of accessibility:\n\nLink and Image Validity\nFenced Div Validity\nHeading Validity\n\nThe validation of lesson elements is performed before the lesson is built, so that the contributor can address any issues even if they have a broken component in the rest of the toolchain. Invalid lesson elements are displayed on the contributors R console with information about the location of the error, an explanation of what was wrong, and a link to resources to help explain the error and offer correction.\n\n\nIn Practice\nBecause of the need for bootstrapping, validation, and caching, the number of steps from source files to lesson website is considerably more than two. The diagram below describes shows the process by which a lesson is built using the workbench.\n\nThe lesson contributor has an idea and writes it in Markdown or R Markdown\nThe lesson contributor runs sandpaper::serve() to start the engine.\n{sandpaper} passes this file to {pegboard}, which checks it for accessibility and reports to the user if there are any errors\n{sandpaper} passes the file to {knitr}, which renders the file to Markdown and stores it in the site/built folder\n{sandpaper} passes the file to PANDOC, which renders the Markdown to HTML (this is temporarily stored as a character vector in R)\n{sandpaper} passes the HTML to {pkgdown}, which applies the templates from {varnish}, creating the lesson website."
  },
  {
    "objectID": "workflow-guide.html#remote-workflow",
    "href": "workflow-guide.html#remote-workflow",
    "title": "Behind the Scenes of The Carpentries Workbench",
    "section": "Remote Workflow",
    "text": "Remote Workflow\nThe motivation for the remote workflows is the same as the local workflow: to allow for rendering of an HTML website without having to rebuild files that have previously been built. The only twist is that these files are necessarily ephemeral because we will never be building the site on the same server day to day, so how do we avoid rebuilding markdown intermediates and HTML outputs when we do not track them by git?\nThe answer is with orphan branches that map on to the folders in site/ using git worktrees, which is achieved via the internal function sandpaper:::ci_deploy().\n\n\n\nFolder\nBranch\nContents\n\n\n\n\nsite/built\nmd-outputs\nMarkdown outputs and rendered files (e.g. images)\n\n\nsite/docs\ngh-pages\nHTML outputs for the live website.\n\n\n\n\n\n\nDiagram of the sandpaper:::ci_deploy() process\n\n\n\n\n\n\n\n\nGlossary\n\n\n\n\norphan branch\n\nOrphan branches are separate branches known to git that share no common history with the main branch.\n\nwork tree\n\nWork trees are a special git workflow that allows you to work on multiple for the same repository in separate folders.\n\n\n\n\nEach time a commit happens on the main branch, the main branch is checked out and then git worktrees are provisioned inside of the site/ directory for each branch via the internal function sandpaper:::git_worktree_setup(), which is modified from Hadley Wickham’s pkgdown::deploy_to_branch() function. After they are provisioned and the contents populated from the existing branches, then they appear on the remote system just like they appear on your local system and the lesson can be updated without rebuilding everyting.\nOnce it is all done, the contents are pushed to their respective branches, the worktrees are disassembled, and the remote runner is released to another task."
  }
]
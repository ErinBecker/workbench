[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Workbench This and That",
    "section": "",
    "text": "The Workbench is an accessible lesson infrastructure built in R\n\n\n\nThe Carpentries Workbench is currently in its Beta Phase an undergoing testing for the broader Carpentries Community including, but not limited to:\n\nMaintainers (Official Lessons)\nLesson Developers (Community-curated Lessons)\nInstructors\nTrainers\nLearners\n\nIf you would like to participate in the beta phase, you can\n\nfind out more about our workbench through our Resource Guide,\nintroduce yourself, and\ngive feedback via GitHub Discussions\n\n\n\n\n\n\nOfficial Workbench Documentation\nCollaborative Lesson Development Training\n\n\n\n\n\n{sandpaper}: User interface and engine for the workbench\n{pegboard}: Validation and parsing of lesson components\n{varnish}: HTML, CSS, and JavaScript templates\n(carpentries/actions): GitHub Actions for Workbench Workflows\n\n\n\n\n\nR Markdown Lesson Template\nMarkdown Lesson Template\n\n\n\n\nThese are examples of lessons developed with The Workbench since the initial announcement:\n\nToby Hodges, Mateusz Kuzak, Aleksandra Nenadic, Sarah Stevens—Collaborative Lesson Development Training\nSaranjeet Kuar, Achintya Rao, Heather Turner, Aman Goel—R’s Bug Tracking\nSaba Ferdous, David Pérez-Suárez—Learn To Discover—Basic Python (note—this uses a custom fork of sandpaper, and varnish to run python)\nPhilipp Matthias Schäfer—GitLab Novice\nMichael Culshaw-Maurer—Rewrite of the R Ecology Lesson"
  },
  {
    "objectID": "transition-guide.html",
    "href": "transition-guide.html",
    "title": "Transition Guide: From Styles to Workbench",
    "section": "",
    "text": "This document is intended to provide you with a quick reference about the differences between kramdown (used by styles) and pandoc-flavoured markdown (used by The Workbench):"
  },
  {
    "objectID": "transition-guide.html#default-branch",
    "href": "transition-guide.html#default-branch",
    "title": "Transition Guide: From Styles to Workbench",
    "section": "Default Branch",
    "text": "Default Branch\n\n\n\n\nWorkbench\nThe default branch is always main\n\n\n\n\nstyles\nThe default branch is gh-pages UNLESS you have rendered RMarkdown content, then the default branch is main"
  },
  {
    "objectID": "transition-guide.html#infrastructure",
    "href": "transition-guide.html#infrastructure",
    "title": "Transition Guide: From Styles to Workbench",
    "section": "Infrastructure",
    "text": "Infrastructure\n\n\n\n\nWorkbench\nThe workbench infrastructure is independent1 from individual lessons. It consists of three major pieces of software.\n\nGit \nR\nPandoc\n\nThe workbench itself consists of three R packages, which can all be updated on the fly with no changes to the lesson.\n\n{sandpaper}: user interface and workflow engine\n{pegboard}: parsing and validation engine\n{varnish}: HTML templates, CSS, and JS elements\n\n\n\n\n\nstyles\nThe styles infrastructure is embedded within the lesson itself. It requires the following major pieces of software to run:\n\nGit\nRuby\nBASH\nMake\nPython2\nR3\n\nThe styles workflow is a Jekyll-based workflow, which uses the following components:\n\nbundler: manages the Ruby gems (packages) including Jekyll\nJekyll: static site generator\n(file) Makefile: workflow management for building and validating\n(dir) assets/: CSS and JS elements\n(dir) _layouts/: HTML templates\n(dir) bin/: intialisation, runtime, and validation scripts (in BASH, Python, and R)\n(dir) _includes/: Markdown and HTML boilerplate for customisation\n\nThe file components can only be updated via pull request."
  },
  {
    "objectID": "transition-guide.html#local-rendering",
    "href": "transition-guide.html#local-rendering",
    "title": "Transition Guide: From Styles to Workbench",
    "section": "Local Rendering",
    "text": "Local Rendering\n\n\n\n\nWorkbench\n\nIf you haven’t already, Follow the setup instructions for the workbench to install R, pandoc, and the workbench packages\nIn your lesson directory, open either R, RStudio, or VS Code and run:\n\nsandpaper::serve()\n\n\n\n\nstyles\n\nIf you haven’t already, Follow the setup instructions for styles to install Ruby, Bundler, Jekyll, Make, Python, and BASH\nIn your lesson directory, open your command line and run:\n\nmake serve"
  },
  {
    "objectID": "transition-guide.html#folder-structure",
    "href": "transition-guide.html#folder-structure",
    "title": "Transition Guide: From Styles to Workbench",
    "section": "Folder Structure",
    "text": "Folder Structure\nThe folders from styles to Workbench are rearranged to achieve the following goals:\n\ntools for building the lesson do not live in the lesson 4.\nthe episodes can be directly lifted from the lesson without needing external context/resources.\nextra content intended for instructors is clearly separated from that intended for learners\n\nEpisodes (aka Chapters) will move from _episodes/ and _episodes_rmd to the single folder episodes/. _extras/ content will be split into learners/ and instructors/ depending on the context of the content. Figures, data, and files all become subfolders of episodes/."
  },
  {
    "objectID": "transition-guide.html#callout-blocks",
    "href": "transition-guide.html#callout-blocks",
    "title": "Transition Guide: From Styles to Workbench",
    "section": "Callout Blocks",
    "text": "Callout Blocks\n\n\n\n\n\nWorkbench\nA callout block with The Workbench uses at least three colons followed by a keyword to start a block. The block is closed with at least three colons.\n:::: callout\n\n### Act Openly\n\nWe believe that transparency, honesty, and fairness are keys to fostering\ntrust within an open community.\n\n::::::::::::\n\n\n\n\n\n\nTip\n\n\n\nThese are called fenced divs and in Workbench lessons, you will often see them have many more colons to clearly delineate sections in a lesson. The number of opening colons and the number of closing colons do not match and it is completely up to the lesson author to choose a style.\n\n\n\n\n\n\nstyles\nA callout block with styles used block quote syntax and level 2 headers followed by a postfix tag declaring the class of block:\n> ## Act Openly\n>\n> We believe that transparency, honesty, and fairness are keys to fostering\n> trust within an open community.\n>\n{: .callout}\n\n\n\n\n\n\nDid you know?\n\n\n\nThe decision to use blockquotes was to facilitate an easy way to author special sections without having lesson authors/contributors type <div> tags into the document."
  },
  {
    "objectID": "transition-guide.html#highlighted-code-blocks",
    "href": "transition-guide.html#highlighted-code-blocks",
    "title": "Transition Guide: From Styles to Workbench",
    "section": "Highlighted Code Blocks",
    "text": "Highlighted Code Blocks\n\n\n\n\n\nWorkbench\nCode fences in the workbench are indicated by fences that consist of three backticks (```) with the name of the language appended on the opening fence:\nclean all merged branches from git\n\n```bash\ngit branch --merged | grep -v '^\\*' | xargs git branch -d\n```\n\n\n\n\nstyles\nCode fences in styles follow kramdown syntax, which prefers fences that consist of three tildes (~~~) with the liquid tag of the language appended on a new line after the closing fence (postfix tag):\nclean all merged branches from git\n\n~~~\ngit branch --merged | grep -v '^\\*' | xargs git branch -d\n~~~\n{: .language-bash}"
  },
  {
    "objectID": "transition-guide.html#challengesolution-blocks",
    "href": "transition-guide.html#challengesolution-blocks",
    "title": "Transition Guide: From Styles to Workbench",
    "section": "Challenge/Solution blocks",
    "text": "Challenge/Solution blocks\n\n\n\n\n\nWorkbench\nThe challenge and solution blocks in the workbench are nested pairs of blocks with an optional Level 3 header. You can additonally add a “hint” block before the solution.\n::::::::::::::::::::::::::::: challenge\n\n### Challenge: build\n\nWhat is the R command to build a Workbench lesson?\n\n::::::: hint\n\nThis command is going to start a **serve**r on your computer\n\n:::::::::::::\n\n::::::::: solution\n\n```r\nsandpaper::serve()\n```\n\n::::::::::::::::::\n:::::::::::::::::::::::::::::::::::::::\n\n\n\n\n\n\nTip\n\n\n\nTo help distinguish sections, double the number of columns for the outer section compared to the inner section.\n\n\n\n\n\n\nstyles\nThe challenge and solution blocks in the workbench are nested block quotes with Level 2 headers. Additional blocks are still of the class “solution”\n> ## Challenge: build\n> \n> What is the R command to build a Workbench lesson?\n> \n> > ## Hint\n> >\n> > This command is going to start a **serve**r on your computer\n> > \n> {: .solution} \n>\n> > ~~~\n> > sandpaper::serve()\n> > ~~~\n> > {: .language-r}\n> {: .solution} \n{: .challenge}"
  },
  {
    "objectID": "transition-guide.html#questionsobjectiveskeypoints",
    "href": "transition-guide.html#questionsobjectiveskeypoints",
    "title": "Transition Guide: From Styles to Workbench",
    "section": "Questions/Objectives/Keypoints",
    "text": "Questions/Objectives/Keypoints\n\n\n\n\n\nWorkbench\nQuestions and Objectives appear at the top of the lesson as fenced divs with list elements:\n---\ntitle: \"Bomp\"\nteaching: 5\nexercises: 5\n---\n\n::::::::::::::::: questions\n\n - Who put the **bomp** in the bomp bah bomp bah bomp?\n - Who put the **ram** in the rama lama ding dong?\n\n:::::::::::::::::::::::::::\n\n::::::::::::::::: objectives\n\n - Solve the \"bomp\" mystery.\n\n::::::::::::::::::::::::::::\n\n## Introduction\n\n...\nKeypoints should go in a fenced div at the end of the document:\n...\n\n::::::::::::::::: keypoints\n\n - We will never know who put the bomp in the bomp bah bomp bah bomp.\n\n:::::::::::::::::::::::::::\n\n\n\n\nstyles\nThe questions, objectives, and keypoints were placed in the YAML metadata for each episode:\n---\ntitle: \"Bomp\"\nteaching: 5\nexercises: 5\nquestions:\n - \"Who put the bomp in the bomp bah bomp bah bomp?\"\n - \"Who put the ram in the rama lama ding dong?\"\nobjectives:\n - \"Solve the \\\"bomp\\\" mystery.\"\nkeypoints:\n - \"We will never know who put the bomp in the bomp bah bomp bah bomp.\" \n---\n\n## Introduction\n\n...\n\n\n\n\n\n\nThe trouble with YAML metadata\n\n\n\nIt was not possible to include markdown inside these strings and it often caused errors due to missed quotation marks (i.e. - \"sentence with a period after quotes\". was a common type of error.)\nThis content was originally introduced into the YAML metadata so that we could use Jekyll’s metadata parsing to create a custom introductory block."
  },
  {
    "objectID": "transition-guide.html#instructor-notes",
    "href": "transition-guide.html#instructor-notes",
    "title": "Transition Guide: From Styles to Workbench",
    "section": "Instructor notes",
    "text": "Instructor notes\n\n\n\n\n\nWorkbench\nAn inline instructor note in the workbench is formed inside an episode by making a fenced div with the class “instructor”\n:::: instructor\n\nHere be dragons\n\n::::::::::::\nInstructor notes for the whole lesson can be placed in instructors/instructor-notes.md\n\n\n\n\nstyles\nInstructor notes do not exist in styles other than an aggregate markdown file called _extras/guide.md"
  },
  {
    "objectID": "transition-guide.html#internal-links",
    "href": "transition-guide.html#internal-links",
    "title": "Transition Guide: From Styles to Workbench",
    "section": "Internal Links",
    "text": "Internal Links\n\n\n\n\n\nWorkbench\nLinks in the Workbench are relative to the file so that you can link to the files and confirm they work in the github preview. Figures, files, and data are nested inside the episodes/ folder.\n<!-- Next Episode -->\n[next episode on dragons](dragons.md)\n<!-- Data -->\n[download the dragon data for this episode](data/dragon-lifespan.csv)\n<!-- Setup -->\n[setup instructions](../learners/setup.md)\n\n\n\n\nstyles\nLinks are relative to the page that they are rendered to. You should use the {{ page.root }} variable and the link tag in order to construct the correct path to the resource:\n<!-- Next Episode -->\n[next episode on dragons]({{ page.root }}{% link _episodes/dragons.md %})\n<!-- Data -->\n[download the dragon data for this episode]({{ page.root }}/data/dragon-lifespan.csv)\n<!-- Setup -->\n[setup instructions]({{ page.root }}/setup.md)"
  },
  {
    "objectID": "transition-guide.html#figures",
    "href": "transition-guide.html#figures",
    "title": "Transition Guide: From Styles to Workbench",
    "section": "Figures",
    "text": "Figures\n\n\n\n\n\nWorkbench\nFigures are written with the caption in the square brackets and alt appended as an attribute like so: ![caption](fig/image.png){alt='image description'}.\n![The dragon emerges!](fig/dragon-egg.png){alt='a red baby \ndragon head sticks out from its egg'}\n\n\n\n\n\n\nNote\n\n\n\nThere is a valid reason behind this choice: text inside of the square brackets can be formatted as markdown, so it makes sense for the caption. Alt text needs no decoration as it will be descriptive.\n\n\n\n\n\n\nstyles\nFigures are written with alt text in the square brackets, but no caption like so: ![alt text]({{ page.root }}/fig/image.png)\n![a red baby dragon head sticks out from its egg]({{ page.root }}/fig/dragon-egg.png)\n\nThe dragon emerges!"
  },
  {
    "objectID": "releases.html",
    "href": "releases.html",
    "title": "How Packages for The Carpentries Workbench Are Released",
    "section": "",
    "text": "The workbench contains three main packages:\n\n{sandpaper}: user interface and workflow engine\n{pegboard}: parsing and validation engine\n{varnish}: HTML templates, CSS, and JS elements\n\nEach of these packages are available on the Carpentries R-Universe and new versions are checked for hourly. This allows folks to get up-to-date versions of The Workbench packages built for their system without running out of GitHub API query attempts.\nIn order to maintain quality, packages are only sent to the R-Universe if they have been formally released on GitHub (as specified in the packages.json configuration file). This allows us to incrementally add new experimental features without changing the stable deployments."
  },
  {
    "objectID": "releases.html#release-process",
    "href": "releases.html#release-process",
    "title": "How Packages for The Carpentries Workbench Are Released",
    "section": "Release Process",
    "text": "Release Process\nWhen a package is ready for release we use the following checklist:\n\n\nUpdate version number in DESCRIPTION\n\nAdd NEWS for the changes in this version\n\nEnsure all changes are committed and pushed\n\nadd new signed tag with the name “ X.Y.Z”# example: create a signed (-s) tag for sandpaper 3.3.3\ngit tag -s 3.3.3 -m 'sandpaper 3.3.3'\n\ncreate a release on github from the new tag\n\n\n\n\n\n\n\nNote\n\n\n\nZhian likes to create tags via the command line because he has set up his git configuration to use a gpg signature so the tags and the releases are both verified.\n\n\nThe last two items can be achieved in a single step with the github cli with the command gh release create X.Y.Z for the version number\ngh release create 3.3.3\n# ? Title (optional) sandpaper 3.3.3\n# ? Release notes  [Use arrows to move, type to filter]\n#   Write my own\n# > Write using generated notes as template\n#   Leave blank\nSelecting “Write using generated notes as a template” opens an editor and populates it with the pull requests that have been accepted since the last release.\nOnce the relase is created on GitHub, then the package will be available on the R-Universe in about an hour or less."
  }
]